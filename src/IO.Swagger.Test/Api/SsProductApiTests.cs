/* 
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing SsProductApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SsProductApiTests
    {
        private SsProductApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SsProductApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SsProductApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SsProductApi
            //Assert.IsInstanceOfType(typeof(SsProductApi), instance, "instance is a SsProductApi");
        }

        
        /// <summary>
        /// Test CustomerEnjoyAdd
        /// </summary>
        [Test]
        public void CustomerEnjoyAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //long? expirationOffset = null;
            //string overrideEnjoyId = null;
            //string overrideSubscriptionId = null;
            //CustomerPack newEnjoy = null;
            //var response = instance.CustomerEnjoyAdd(customerId, expirationOffset, overrideEnjoyId, overrideSubscriptionId, newEnjoy);
            //Assert.IsInstanceOf<CustomerPack> (response, "response is CustomerPack");
        }
        
        /// <summary>
        /// Test CustomerEnjoyClose
        /// </summary>
        [Test]
        public void CustomerEnjoyCloseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string enjoyId = null;
            //var response = instance.CustomerEnjoyClose(customerId, enjoyId);
            //Assert.IsInstanceOf<CustomerPack> (response, "response is CustomerPack");
        }
        
        /// <summary>
        /// Test CustomerEnjoyGet
        /// </summary>
        [Test]
        public void CustomerEnjoyGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string enjoyId = null;
            //var response = instance.CustomerEnjoyGet(customerId, enjoyId);
            //Assert.IsInstanceOf<CustomerPack> (response, "response is CustomerPack");
        }
        
        /// <summary>
        /// Test CustomerEnjoyGetAll
        /// </summary>
        [Test]
        public void CustomerEnjoyGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //var response = instance.CustomerEnjoyGetAll(customerId);
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }
        
        /// <summary>
        /// Test CustomerEnjoySpend
        /// </summary>
        [Test]
        public void CustomerEnjoySpendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string customerPackId = null;
            //var response = instance.CustomerEnjoySpend(customerId, customerPackId);
            //Assert.IsInstanceOf<Dictionary<string, long?>> (response, "response is Dictionary<string, long?>");
        }
        
        /// <summary>
        /// Test CustomerEnjoyValues
        /// </summary>
        [Test]
        public void CustomerEnjoyValuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //int? page = null;
            //int? numberPerPage = null;
            //bool? loadResourceStatusList = null;
            //instance.CustomerEnjoyValues(customerId, page, numberPerPage, loadResourceStatusList);
            
        }
        
        /// <summary>
        /// Test CustomerHistoryPackGet
        /// </summary>
        [Test]
        public void CustomerHistoryPackGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string id = null;
            //var response = instance.CustomerHistoryPackGet(customerId, id);
            //Assert.IsInstanceOf<CustomerPack> (response, "response is CustomerPack");
        }
        
        /// <summary>
        /// Test CustomerHistoryPackGetAll
        /// </summary>
        [Test]
        public void CustomerHistoryPackGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //var response = instance.CustomerHistoryPackGetAll(customerId);
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }
        
        /// <summary>
        /// Test CustomerHistoryPackValues
        /// </summary>
        [Test]
        public void CustomerHistoryPackValuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //int? page = null;
            //int? numberPerPage = null;
            //bool? loadResourceStatusList = null;
            //instance.CustomerHistoryPackValues(customerId, page, numberPerPage, loadResourceStatusList);
            
        }
        
        /// <summary>
        /// Test CustomerHistorySubscriptionGet
        /// </summary>
        [Test]
        public void CustomerHistorySubscriptionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string id = null;
            //var response = instance.CustomerHistorySubscriptionGet(customerId, id);
            //Assert.IsInstanceOf<CustomerPack> (response, "response is CustomerPack");
        }
        
        /// <summary>
        /// Test CustomerHistorySubscriptionGetAll
        /// </summary>
        [Test]
        public void CustomerHistorySubscriptionGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //var response = instance.CustomerHistorySubscriptionGetAll(customerId);
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }
        
        /// <summary>
        /// Test CustomerHistorySubscriptionValues
        /// </summary>
        [Test]
        public void CustomerHistorySubscriptionValuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //int? page = null;
            //int? numberPerPage = null;
            //bool? loadResourceStatusList = null;
            //instance.CustomerHistorySubscriptionValues(customerId, page, numberPerPage, loadResourceStatusList);
            
        }
        
        /// <summary>
        /// Test CustomerResource
        /// </summary>
        [Test]
        public void CustomerResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //int? page = null;
            //int? numberPerPage = null;
            //instance.CustomerResource(customerId, page, numberPerPage);
            
        }
        
        /// <summary>
        /// Test CustomerSubscriptionAdd
        /// </summary>
        [Test]
        public void CustomerSubscriptionAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string overrideSubscriptionId = null;
            //string overrideEnjoyId = null;
            //CustomerPackSubscription newSubscription = null;
            //var response = instance.CustomerSubscriptionAdd(customerId, overrideSubscriptionId, overrideEnjoyId, newSubscription);
            //Assert.IsInstanceOf<CustomerPackSubscription> (response, "response is CustomerPackSubscription");
        }
        
        /// <summary>
        /// Test CustomerSubscriptionClose
        /// </summary>
        [Test]
        public void CustomerSubscriptionCloseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string subscriptionId = null;
            //var response = instance.CustomerSubscriptionClose(customerId, subscriptionId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test CustomerSubscriptionGet
        /// </summary>
        [Test]
        public void CustomerSubscriptionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string subscriptionId = null;
            //var response = instance.CustomerSubscriptionGet(customerId, subscriptionId);
            //Assert.IsInstanceOf<CustomerPackSubscription> (response, "response is CustomerPackSubscription");
        }
        
        /// <summary>
        /// Test CustomerSubscriptionGetAll
        /// </summary>
        [Test]
        public void CustomerSubscriptionGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //var response = instance.CustomerSubscriptionGetAll(customerId);
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }
        
        /// <summary>
        /// Test CustomerSubscriptionRenew
        /// </summary>
        [Test]
        public void CustomerSubscriptionRenewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string subscriptionId = null;
            //var response = instance.CustomerSubscriptionRenew(customerId, subscriptionId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test CustomerSubscriptionSpend
        /// </summary>
        [Test]
        public void CustomerSubscriptionSpendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string customerSubscriptionId = null;
            //var response = instance.CustomerSubscriptionSpend(customerId, customerSubscriptionId);
            //Assert.IsInstanceOf<Dictionary<string, long?>> (response, "response is Dictionary<string, long?>");
        }
        
        /// <summary>
        /// Test CustomerSubscriptionValues
        /// </summary>
        [Test]
        public void CustomerSubscriptionValuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //int? page = null;
            //int? numberPerPage = null;
            //bool? loadDefaultUser = null;
            //instance.CustomerSubscriptionValues(customerId, page, numberPerPage, loadDefaultUser);
            
        }
        
        /// <summary>
        /// Test ProductConfigGet
        /// </summary>
        [Test]
        public void ProductConfigGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ProductConfigGet();
            //Assert.IsInstanceOf<ProductConf> (response, "response is ProductConf");
        }
        
        /// <summary>
        /// Test ProductConfigPut
        /// </summary>
        [Test]
        public void ProductConfigPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductConf a = null;
            //var response = instance.ProductConfigPut(a);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}
