/* 
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing SsPaymentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SsPaymentApiTests
    {
        private SsPaymentApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SsPaymentApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SsPaymentApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SsPaymentApi
            //Assert.IsInstanceOfType(typeof(SsPaymentApi), instance, "instance is a SsPaymentApi");
        }

        
        /// <summary>
        /// Test Conf
        /// </summary>
        [Test]
        public void ConfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Conf();
            //Assert.IsInstanceOf<PaymentConf> (response, "response is PaymentConf");
        }
        
        /// <summary>
        /// Test CustomerInfoCurrency
        /// </summary>
        [Test]
        public void CustomerInfoCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string currency = null;
            //var response = instance.CustomerInfoCurrency(customerId, currency);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test CustomerInfoGet
        /// </summary>
        [Test]
        public void CustomerInfoGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //var response = instance.CustomerInfoGet(customerId);
            //Assert.IsInstanceOf<CustomerInfo> (response, "response is CustomerInfo");
        }
        
        /// <summary>
        /// Test CustomerInfoHasPaymentInfo
        /// </summary>
        [Test]
        public void CustomerInfoHasPaymentInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //var response = instance.CustomerInfoHasPaymentInfo(customerId);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test CustomerInfoStripeCustomer
        /// </summary>
        [Test]
        public void CustomerInfoStripeCustomerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //StripeCustomer stripeCustomer = null;
            //var response = instance.CustomerInfoStripeCustomer(customerId, stripeCustomer);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test CustomerPaymentAdd
        /// </summary>
        [Test]
        public void CustomerPaymentAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //PaymentRequest paymentRequest = null;
            //var response = instance.CustomerPaymentAdd(customerId, paymentRequest);
            //Assert.IsInstanceOf<PaymentRequest> (response, "response is PaymentRequest");
        }
        
        /// <summary>
        /// Test CustomerPaymentCancelPatch
        /// </summary>
        [Test]
        public void CustomerPaymentCancelPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string paymentId = null;
            //var response = instance.CustomerPaymentCancelPatch(customerId, paymentId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test CustomerPaymentGet
        /// </summary>
        [Test]
        public void CustomerPaymentGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string paymentId = null;
            //var response = instance.CustomerPaymentGet(customerId, paymentId);
            //Assert.IsInstanceOf<PaymentRequest> (response, "response is PaymentRequest");
        }
        
        /// <summary>
        /// Test CustomerPaymentPayPatch
        /// </summary>
        [Test]
        public void CustomerPaymentPayPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string paymentId = null;
            //var response = instance.CustomerPaymentPayPatch(customerId, paymentId);
            //Assert.IsInstanceOf<PaymentRequest> (response, "response is PaymentRequest");
        }
        
        /// <summary>
        /// Test CustomerPaymentValues
        /// </summary>
        [Test]
        public void CustomerPaymentValuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //int? page = null;
            //int? numberPerPage = null;
            //instance.CustomerPaymentValues(customerId, page, numberPerPage);
            
        }
        
        /// <summary>
        /// Test PaymentConfigGet
        /// </summary>
        [Test]
        public void PaymentConfigGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.PaymentConfigGet();
            //Assert.IsInstanceOf<PaymentConf> (response, "response is PaymentConf");
        }
        
        /// <summary>
        /// Test PaymentConfigPut
        /// </summary>
        [Test]
        public void PaymentConfigPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PaymentConf a = null;
            //var response = instance.PaymentConfigPut(a);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PaymentGetAll
        /// </summary>
        [Test]
        public void PaymentGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? numberPerPage = null;
            //instance.PaymentGetAll(page, numberPerPage);
            
        }
        
    }

}
