/* 
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing SsUserApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SsUserApiTests
    {
        private SsUserApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SsUserApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SsUserApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SsUserApi
            //Assert.IsInstanceOfType(typeof(SsUserApi), instance, "instance is a SsUserApi");
        }

        
        /// <summary>
        /// Test AccountAdd
        /// </summary>
        [Test]
        public void AccountAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Account newAccount = null;
            //var response = instance.AccountAdd(newAccount);
            //Assert.IsInstanceOf<Account> (response, "response is Account");
        }
        
        /// <summary>
        /// Test AccountAutoLogin
        /// </summary>
        [Test]
        public void AccountAutoLoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string rememberMeToken = null;
            //var response = instance.AccountAutoLogin(rememberMeToken);
            //Assert.IsInstanceOf<Session> (response, "response is Session");
        }
        
        /// <summary>
        /// Test AccountChangePasswordPatch
        /// </summary>
        [Test]
        public void AccountChangePasswordPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string changePwdToken = null;
            //EmailRecover recover = null;
            //var response = instance.AccountChangePasswordPatch(changePwdToken, recover);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test AccountGetAll
        /// </summary>
        [Test]
        public void AccountGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? numberPerPage = null;
            //bool? loadDefaultUser = null;
            //instance.AccountGetAll(page, numberPerPage, loadDefaultUser);
            
        }
        
        /// <summary>
        /// Test AccountIdGet
        /// </summary>
        [Test]
        public void AccountIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //var response = instance.AccountIdGet(accountId);
            //Assert.IsInstanceOf<Account> (response, "response is Account");
        }
        
        /// <summary>
        /// Test AccountIdKeysAdd
        /// </summary>
        [Test]
        public void AccountIdKeysAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //var response = instance.AccountIdKeysAdd(accountId);
            //Assert.IsInstanceOf<UserApi> (response, "response is UserApi");
        }
        
        /// <summary>
        /// Test AccountIdKeysDel
        /// </summary>
        [Test]
        public void AccountIdKeysDelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //var response = instance.AccountIdKeysDel(accountId, userId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test AccountIdKeysGetAll
        /// </summary>
        [Test]
        public void AccountIdKeysGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //int? page = null;
            //int? numberPerPage = null;
            //instance.AccountIdKeysGetAll(accountId, page, numberPerPage);
            
        }
        
        /// <summary>
        /// Test AccountIdPrivateDataPut
        /// </summary>
        [Test]
        public void AccountIdPrivateDataPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //Object privateData = null;
            //var response = instance.AccountIdPrivateDataPut(accountId, privateData);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test AccountIdPut
        /// </summary>
        [Test]
        public void AccountIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //Account newAccount = null;
            //var response = instance.AccountIdPut(accountId, newAccount);
            //Assert.IsInstanceOf<Account> (response, "response is Account");
        }
        
        /// <summary>
        /// Test AccountIdStatusPut
        /// </summary>
        [Test]
        public void AccountIdStatusPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string status = null;
            //var response = instance.AccountIdStatusPut(accountId, status);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test AccountIdUserAdd
        /// </summary>
        [Test]
        public void AccountIdUserAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //User user = null;
            //var response = instance.AccountIdUserAdd(accountId, user);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test AccountIdUserChangePwdToken
        /// </summary>
        [Test]
        public void AccountIdUserChangePwdTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //string currentPwd = null;
            //var response = instance.AccountIdUserChangePwdToken(accountId, userId, currentPwd);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test AccountIdUserGet
        /// </summary>
        [Test]
        public void AccountIdUserGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //var response = instance.AccountIdUserGet(accountId, userId);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test AccountIdUserLogin
        /// </summary>
        [Test]
        public void AccountIdUserLoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //var response = instance.AccountIdUserLogin(accountId, userId);
            //Assert.IsInstanceOf<Session> (response, "response is Session");
        }
        
        /// <summary>
        /// Test AccountIdUserPut
        /// </summary>
        [Test]
        public void AccountIdUserPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //User user = null;
            //var response = instance.AccountIdUserPut(accountId, userId, user);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test AccountIdUserResendEmailConfirmation
        /// </summary>
        [Test]
        public void AccountIdUserResendEmailConfirmationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //var response = instance.AccountIdUserResendEmailConfirmation(accountId, userId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test AccountLogin
        /// </summary>
        [Test]
        public void AccountLoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Login login = null;
            //var response = instance.AccountLogin(login);
            //Assert.IsInstanceOf<Session> (response, "response is Session");
        }
        
        /// <summary>
        /// Test AccountLoginOrAdd
        /// </summary>
        [Test]
        public void AccountLoginOrAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Account account = null;
            //var response = instance.AccountLoginOrAdd(account);
            //Assert.IsInstanceOf<Session> (response, "response is Session");
        }
        
        /// <summary>
        /// Test AccountRecover
        /// </summary>
        [Test]
        public void AccountRecoverTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EmailRecover recover = null;
            //var response = instance.AccountRecover(recover);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test AccountUserChangePwdToken
        /// </summary>
        [Test]
        public void AccountUserChangePwdTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string currentPwd = null;
            //var response = instance.AccountUserChangePwdToken(userId, currentPwd);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test AccountUserGet
        /// </summary>
        [Test]
        public void AccountUserGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.AccountUserGet(userId);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test AccountUserLogin
        /// </summary>
        [Test]
        public void AccountUserLoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.AccountUserLogin(userId);
            //Assert.IsInstanceOf<Session> (response, "response is Session");
        }
        
        /// <summary>
        /// Test AccountUserPut
        /// </summary>
        [Test]
        public void AccountUserPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //User user = null;
            //var response = instance.AccountUserPut(userId, user);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test AccountUserResendEmailConfirmation
        /// </summary>
        [Test]
        public void AccountUserResendEmailConfirmationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.AccountUserResendEmailConfirmation(userId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test AccountUsernameChangePwdToken
        /// </summary>
        [Test]
        public void AccountUsernameChangePwdTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string usr = null;
            //string currentPwd = null;
            //var response = instance.AccountUsernameChangePwdToken(usr, currentPwd);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test AccountUsernameGet
        /// </summary>
        [Test]
        public void AccountUsernameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string usr = null;
            //var response = instance.AccountUsernameGet(usr);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test AccountUsernameLogin
        /// </summary>
        [Test]
        public void AccountUsernameLoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string usr = null;
            //var response = instance.AccountUsernameLogin(usr);
            //Assert.IsInstanceOf<Session> (response, "response is Session");
        }
        
        /// <summary>
        /// Test AccountUsernamePut
        /// </summary>
        [Test]
        public void AccountUsernamePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string usr = null;
            //User user = null;
            //var response = instance.AccountUsernamePut(usr, user);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test AccountUsernameResendEmailConfirmation
        /// </summary>
        [Test]
        public void AccountUsernameResendEmailConfirmationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string usr = null;
            //var response = instance.AccountUsernameResendEmailConfirmation(usr);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test Authenticate
        /// </summary>
        [Test]
        public void AuthenticateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //var response = instance.Authenticate(authtoken);
            //Assert.IsInstanceOf<UtUser> (response, "response is UtUser");
        }
        
        /// <summary>
        /// Test Config
        /// </summary>
        [Test]
        public void ConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Config();
            //Assert.IsInstanceOf<UserConfig> (response, "response is UserConfig");
        }
        
        /// <summary>
        /// Test GoogleLogin
        /// </summary>
        [Test]
        public void GoogleLoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GoogleAuth google = null;
            //var response = instance.GoogleLogin(google);
            //Assert.IsInstanceOf<Session> (response, "response is Session");
        }
        
        /// <summary>
        /// Test HtmlConf
        /// </summary>
        [Test]
        public void HtmlConfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.HtmlConf();
            //Assert.IsInstanceOf<UserUiConf> (response, "response is UserUiConf");
        }
        
        /// <summary>
        /// Test SelfAccountGet
        /// </summary>
        [Test]
        public void SelfAccountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SelfAccountGet();
            //Assert.IsInstanceOf<Account> (response, "response is Account");
        }
        
        /// <summary>
        /// Test SelfAccountKeysAdd
        /// </summary>
        [Test]
        public void SelfAccountKeysAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SelfAccountKeysAdd();
            //Assert.IsInstanceOf<UserApi> (response, "response is UserApi");
        }
        
        /// <summary>
        /// Test SelfAccountKeysDel
        /// </summary>
        [Test]
        public void SelfAccountKeysDelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.SelfAccountKeysDel(userId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test SelfAccountKeysGetAll
        /// </summary>
        [Test]
        public void SelfAccountKeysGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? numberPerPage = null;
            //instance.SelfAccountKeysGetAll(page, numberPerPage);
            
        }
        
        /// <summary>
        /// Test SelfAccountPrivateDataPut
        /// </summary>
        [Test]
        public void SelfAccountPrivateDataPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object privateData = null;
            //var response = instance.SelfAccountPrivateDataPut(privateData);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test SelfAccountPut
        /// </summary>
        [Test]
        public void SelfAccountPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Account newAccount = null;
            //var response = instance.SelfAccountPut(newAccount);
            //Assert.IsInstanceOf<Account> (response, "response is Account");
        }
        
        /// <summary>
        /// Test SelfAccountStatusPut
        /// </summary>
        [Test]
        public void SelfAccountStatusPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string status = null;
            //var response = instance.SelfAccountStatusPut(status);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test SelfAccountUserAdd
        /// </summary>
        [Test]
        public void SelfAccountUserAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //User user = null;
            //var response = instance.SelfAccountUserAdd(user);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test SelfAccountUserChangePwdToken
        /// </summary>
        [Test]
        public void SelfAccountUserChangePwdTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string currentPwd = null;
            //var response = instance.SelfAccountUserChangePwdToken(userId, currentPwd);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test SelfAccountUserGet
        /// </summary>
        [Test]
        public void SelfAccountUserGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.SelfAccountUserGet(userId);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test SelfAccountUserLogin
        /// </summary>
        [Test]
        public void SelfAccountUserLoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.SelfAccountUserLogin(userId);
            //Assert.IsInstanceOf<Session> (response, "response is Session");
        }
        
        /// <summary>
        /// Test SelfAccountUserPut
        /// </summary>
        [Test]
        public void SelfAccountUserPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //User user = null;
            //var response = instance.SelfAccountUserPut(userId, user);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test SelfAccountUserResendEmailConfirmation
        /// </summary>
        [Test]
        public void SelfAccountUserResendEmailConfirmationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.SelfAccountUserResendEmailConfirmation(userId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test SelfUserChangePwdToken
        /// </summary>
        [Test]
        public void SelfUserChangePwdTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string currentPwd = null;
            //var response = instance.SelfUserChangePwdToken(currentPwd);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test SelfUserGet
        /// </summary>
        [Test]
        public void SelfUserGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SelfUserGet();
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test SelfUserLogin
        /// </summary>
        [Test]
        public void SelfUserLoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SelfUserLogin();
            //Assert.IsInstanceOf<Session> (response, "response is Session");
        }
        
        /// <summary>
        /// Test SelfUserPut
        /// </summary>
        [Test]
        public void SelfUserPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //User user = null;
            //var response = instance.SelfUserPut(user);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test SelfUserResendEmailConfirmation
        /// </summary>
        [Test]
        public void SelfUserResendEmailConfirmationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SelfUserResendEmailConfirmation();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test UserConfigGet
        /// </summary>
        [Test]
        public void UserConfigGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UserConfigGet();
            //Assert.IsInstanceOf<UserConfig> (response, "response is UserConfig");
        }
        
        /// <summary>
        /// Test UserConfigPut
        /// </summary>
        [Test]
        public void UserConfigPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserConfig a = null;
            //var response = instance.UserConfigPut(a);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test UserUiConfigGet
        /// </summary>
        [Test]
        public void UserUiConfigGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UserUiConfigGet();
            //Assert.IsInstanceOf<UserUiConf> (response, "response is UserUiConf");
        }
        
        /// <summary>
        /// Test UserUiConfigPut
        /// </summary>
        [Test]
        public void UserUiConfigPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserUiConf a = null;
            //var response = instance.UserUiConfigPut(a);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}
