/* 
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing SsPricingApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SsPricingApiTests
    {
        private SsPricingApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SsPricingApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SsPricingApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SsPricingApi
            //Assert.IsInstanceOfType(typeof(SsPricingApi), instance, "instance is a SsPricingApi");
        }

        
        /// <summary>
        /// Test CustomerBillClose
        /// </summary>
        [Test]
        public void CustomerBillCloseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string customerBillId = null;
            //var response = instance.CustomerBillClose(customerId, customerBillId);
            //Assert.IsInstanceOf<CustomerBill> (response, "response is CustomerBill");
        }
        
        /// <summary>
        /// Test CustomerBillGet
        /// </summary>
        [Test]
        public void CustomerBillGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string customerBillId = null;
            //var response = instance.CustomerBillGet(customerId, customerBillId);
            //Assert.IsInstanceOf<CustomerBill> (response, "response is CustomerBill");
        }
        
        /// <summary>
        /// Test CustomerBillInitGet
        /// </summary>
        [Test]
        public void CustomerBillInitGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string billId = null;
            //string customerPlanId = null;
            //var response = instance.CustomerBillInitGet(customerId, billId, customerPlanId);
            //Assert.IsInstanceOf<CustomerBill> (response, "response is CustomerBill");
        }
        
        /// <summary>
        /// Test CustomerBillInitPost
        /// </summary>
        [Test]
        public void CustomerBillInitPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string billId = null;
            //string customerPlanId = null;
            //var response = instance.CustomerBillInitPost(customerId, billId, customerPlanId);
            //Assert.IsInstanceOf<CustomerBill> (response, "response is CustomerBill");
        }
        
        /// <summary>
        /// Test CustomerBillOrGet
        /// </summary>
        [Test]
        public void CustomerBillOrGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //var response = instance.CustomerBillOrGet(customerId);
            //Assert.IsInstanceOf<CustomerBill> (response, "response is CustomerBill");
        }
        
        /// <summary>
        /// Test CustomerBillValues
        /// </summary>
        [Test]
        public void CustomerBillValuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //int? page = null;
            //int? numberPerPage = null;
            //instance.CustomerBillValues(customerId, page, numberPerPage);
            
        }
        
        /// <summary>
        /// Test CustomerHistoryPlanValues
        /// </summary>
        [Test]
        public void CustomerHistoryPlanValuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //int? page = null;
            //int? numberPerPage = null;
            //instance.CustomerHistoryPlanValues(customerId, page, numberPerPage);
            
        }
        
        /// <summary>
        /// Test CustomerPlanAdd
        /// </summary>
        [Test]
        public void CustomerPlanAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //CustomerPlan customerPlan = null;
            //var response = instance.CustomerPlanAdd(customerId, customerPlan);
            //Assert.IsInstanceOf<CustomerPlan> (response, "response is CustomerPlan");
        }
        
        /// <summary>
        /// Test CustomerPlanAddCheck
        /// </summary>
        [Test]
        public void CustomerPlanAddCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //CustomerPlan customerPlan = null;
            //var response = instance.CustomerPlanAddCheck(customerId, customerPlan);
            //Assert.IsInstanceOf<CustomerPlan> (response, "response is CustomerPlan");
        }
        
        /// <summary>
        /// Test CustomerPlanClose
        /// </summary>
        [Test]
        public void CustomerPlanCloseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string customerPlanId = null;
            //var response = instance.CustomerPlanClose(customerId, customerPlanId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test CustomerPlanFamily
        /// </summary>
        [Test]
        public void CustomerPlanFamilyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string family = null;
            //var response = instance.CustomerPlanFamily(customerId, family);
            //Assert.IsInstanceOf<CustomerPlan> (response, "response is CustomerPlan");
        }
        
        /// <summary>
        /// Test CustomerPlanGet
        /// </summary>
        [Test]
        public void CustomerPlanGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string customerPlanId = null;
            //var response = instance.CustomerPlanGet(customerId, customerPlanId);
            //Assert.IsInstanceOf<CustomerPlan> (response, "response is CustomerPlan");
        }
        
        /// <summary>
        /// Test CustomerPlanGetAll
        /// </summary>
        [Test]
        public void CustomerPlanGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //var response = instance.CustomerPlanGetAll(customerId);
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }
        
        /// <summary>
        /// Test CustomerPlanPay
        /// </summary>
        [Test]
        public void CustomerPlanPayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string customerPlanId = null;
            //string customerBillId = null;
            //string whenPay = null;
            //var response = instance.CustomerPlanPay(customerId, customerPlanId, customerBillId, whenPay);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test CustomerPlanPlan
        /// </summary>
        [Test]
        public void CustomerPlanPlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string planId = null;
            //var response = instance.CustomerPlanPlan(customerId, planId);
            //Assert.IsInstanceOf<Plan> (response, "response is Plan");
        }
        
        /// <summary>
        /// Test CustomerPlanValues
        /// </summary>
        [Test]
        public void CustomerPlanValuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //int? page = null;
            //int? numberPerPage = null;
            //instance.CustomerPlanValues(customerId, page, numberPerPage);
            
        }
        
        /// <summary>
        /// Test Pricing
        /// </summary>
        [Test]
        public void PricingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string currency = null;
            //string onlyPanId = null;
            //var response = instance.Pricing(currency, onlyPanId);
            //Assert.IsInstanceOf<PricingTableFull> (response, "response is PricingTableFull");
        }
        
        /// <summary>
        /// Test Pricing2
        /// </summary>
        [Test]
        public void Pricing2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string currency = null;
            //string onlyPanId = null;
            //var response = instance.Pricing2(currency, onlyPanId);
            //Assert.IsInstanceOf<PricingTable2Full> (response, "response is PricingTable2Full");
        }
        
        /// <summary>
        /// Test PricingConfigGet
        /// </summary>
        [Test]
        public void PricingConfigGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.PricingConfigGet();
            //Assert.IsInstanceOf<PricingConf> (response, "response is PricingConf");
        }
        
        /// <summary>
        /// Test PricingConfigPut
        /// </summary>
        [Test]
        public void PricingConfigPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PricingConf a = null;
            //var response = instance.PricingConfigPut(a);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PricingUiConf
        /// </summary>
        [Test]
        public void PricingUiConfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.PricingUiConf();
            //Assert.IsInstanceOf<PricingUiConf> (response, "response is PricingUiConf");
        }
        
        /// <summary>
        /// Test PricingUiConfigGet
        /// </summary>
        [Test]
        public void PricingUiConfigGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.PricingUiConfigGet();
            //Assert.IsInstanceOf<PricingUiConf> (response, "response is PricingUiConf");
        }
        
        /// <summary>
        /// Test PricingUiConfigPut
        /// </summary>
        [Test]
        public void PricingUiConfigPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PricingUiConf a = null;
            //var response = instance.PricingUiConfigPut(a);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}
