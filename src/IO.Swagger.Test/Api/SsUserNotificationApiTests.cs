/* 
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing SsUserNotificationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SsUserNotificationApiTests
    {
        private SsUserNotificationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SsUserNotificationApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SsUserNotificationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SsUserNotificationApi
            //Assert.IsInstanceOfType(typeof(SsUserNotificationApi), instance, "instance is a SsUserNotificationApi");
        }

        
        /// <summary>
        /// Test OperatorConf
        /// </summary>
        [Test]
        public void OperatorConfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string notificationKey = null;
            //var response = instance.OperatorConf(notificationKey);
            //Assert.IsInstanceOf<OperatorConfiguration> (response, "response is OperatorConfiguration");
        }
        
        /// <summary>
        /// Test OperatorSend
        /// </summary>
        [Test]
        public void OperatorSendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string notificationKey = null;
            //var response = instance.OperatorSend(notificationKey);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test OperatorSendEmail
        /// </summary>
        [Test]
        public void OperatorSendEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string notificationKey = null;
            //Email email = null;
            //var response = instance.OperatorSendEmail(notificationKey, email);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test UserSend
        /// </summary>
        [Test]
        public void UserSendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string notificationKey = null;
            //var response = instance.UserSend(userId, notificationKey);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test UserSendEmail
        /// </summary>
        [Test]
        public void UserSendEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //Email email = null;
            //var response = instance.UserSendEmail(userId, email);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}
