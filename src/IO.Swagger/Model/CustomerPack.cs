/* 
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Model description
    /// </summary>
    [DataContract]
    public partial class CustomerPack :  IEquatable<CustomerPack>
    {
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum History for "History"
            /// </summary>
            [EnumMember(Value = "History")]
            History,
            
            /// <summary>
            /// Enum Closing for "Closing"
            /// </summary>
            [EnumMember(Value = "Closing")]
            Closing,
            
            /// <summary>
            /// Enum Enjoy for "Enjoy"
            /// </summary>
            [EnumMember(Value = "Enjoy")]
            Enjoy,
            
            /// <summary>
            /// Enum Creating for "Creating"
            /// </summary>
            [EnumMember(Value = "Creating")]
            Creating
        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerPack" /> class.
        /// </summary>
        /// <param name="ClosedTime">ClosedTime.</param>
        /// <param name="State">State.</param>
        /// <param name="ResourceStatuList">ResourceStatuList.</param>
        /// <param name="SubscriptionId">SubscriptionId.</param>
        /// <param name="ExpirationTimeSpan">ExpirationTimeSpan.</param>
        /// <param name="CustomerId">CustomerId.</param>
        /// <param name="Id">Id.</param>
        /// <param name="ExactConfId">ExactConfId.</param>
        /// <param name="PackId">PackId.</param>
        /// <param name="Spent">Spent.</param>
        /// <param name="CreationTime">CreationTime.</param>
        public CustomerPack(long? ClosedTime = null, StateEnum? State = null, List<ResourceStatus> ResourceStatuList = null, string SubscriptionId = null, long? ExpirationTimeSpan = null, string CustomerId = null, string Id = null, string ExactConfId = null, string PackId = null, Dictionary<string, long?> Spent = null, long? CreationTime = null)
        {
            this.ClosedTime = ClosedTime;
            this.State = State;
            this.ResourceStatuList = ResourceStatuList;
            this.SubscriptionId = SubscriptionId;
            this.ExpirationTimeSpan = ExpirationTimeSpan;
            this.CustomerId = CustomerId;
            this.Id = Id;
            this.ExactConfId = ExactConfId;
            this.PackId = PackId;
            this.Spent = Spent;
            this.CreationTime = CreationTime;
        }
        
        /// <summary>
        /// Gets or Sets ClosedTime
        /// </summary>
        [DataMember(Name="closedTime", EmitDefaultValue=false)]
        public long? ClosedTime { get; set; }
        /// <summary>
        /// Gets or Sets ResourceStatuList
        /// </summary>
        [DataMember(Name="resourceStatuList", EmitDefaultValue=false)]
        public List<ResourceStatus> ResourceStatuList { get; set; }
        /// <summary>
        /// Gets or Sets SubscriptionId
        /// </summary>
        [DataMember(Name="subscriptionId", EmitDefaultValue=false)]
        public string SubscriptionId { get; set; }
        /// <summary>
        /// Gets or Sets ExpirationTimeSpan
        /// </summary>
        [DataMember(Name="expirationTimeSpan", EmitDefaultValue=false)]
        public long? ExpirationTimeSpan { get; set; }
        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name="customerId", EmitDefaultValue=false)]
        public string CustomerId { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets ExactConfId
        /// </summary>
        [DataMember(Name="exactConfId", EmitDefaultValue=false)]
        public string ExactConfId { get; set; }
        /// <summary>
        /// Gets or Sets PackId
        /// </summary>
        [DataMember(Name="packId", EmitDefaultValue=false)]
        public string PackId { get; set; }
        /// <summary>
        /// Gets or Sets Spent
        /// </summary>
        [DataMember(Name="spent", EmitDefaultValue=false)]
        public Dictionary<string, long?> Spent { get; set; }
        /// <summary>
        /// Gets or Sets CreationTime
        /// </summary>
        [DataMember(Name="creationTime", EmitDefaultValue=false)]
        public long? CreationTime { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerPack {\n");
            sb.Append("  ClosedTime: ").Append(ClosedTime).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ResourceStatuList: ").Append(ResourceStatuList).Append("\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("  ExpirationTimeSpan: ").Append(ExpirationTimeSpan).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ExactConfId: ").Append(ExactConfId).Append("\n");
            sb.Append("  PackId: ").Append(PackId).Append("\n");
            sb.Append("  Spent: ").Append(Spent).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CustomerPack);
        }

        /// <summary>
        /// Returns true if CustomerPack instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomerPack to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerPack other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ClosedTime == other.ClosedTime ||
                    this.ClosedTime != null &&
                    this.ClosedTime.Equals(other.ClosedTime)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.ResourceStatuList == other.ResourceStatuList ||
                    this.ResourceStatuList != null &&
                    this.ResourceStatuList.SequenceEqual(other.ResourceStatuList)
                ) && 
                (
                    this.SubscriptionId == other.SubscriptionId ||
                    this.SubscriptionId != null &&
                    this.SubscriptionId.Equals(other.SubscriptionId)
                ) && 
                (
                    this.ExpirationTimeSpan == other.ExpirationTimeSpan ||
                    this.ExpirationTimeSpan != null &&
                    this.ExpirationTimeSpan.Equals(other.ExpirationTimeSpan)
                ) && 
                (
                    this.CustomerId == other.CustomerId ||
                    this.CustomerId != null &&
                    this.CustomerId.Equals(other.CustomerId)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.ExactConfId == other.ExactConfId ||
                    this.ExactConfId != null &&
                    this.ExactConfId.Equals(other.ExactConfId)
                ) && 
                (
                    this.PackId == other.PackId ||
                    this.PackId != null &&
                    this.PackId.Equals(other.PackId)
                ) && 
                (
                    this.Spent == other.Spent ||
                    this.Spent != null &&
                    this.Spent.SequenceEqual(other.Spent)
                ) && 
                (
                    this.CreationTime == other.CreationTime ||
                    this.CreationTime != null &&
                    this.CreationTime.Equals(other.CreationTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ClosedTime != null)
                    hash = hash * 59 + this.ClosedTime.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.ResourceStatuList != null)
                    hash = hash * 59 + this.ResourceStatuList.GetHashCode();
                if (this.SubscriptionId != null)
                    hash = hash * 59 + this.SubscriptionId.GetHashCode();
                if (this.ExpirationTimeSpan != null)
                    hash = hash * 59 + this.ExpirationTimeSpan.GetHashCode();
                if (this.CustomerId != null)
                    hash = hash * 59 + this.CustomerId.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.ExactConfId != null)
                    hash = hash * 59 + this.ExactConfId.GetHashCode();
                if (this.PackId != null)
                    hash = hash * 59 + this.PackId.GetHashCode();
                if (this.Spent != null)
                    hash = hash * 59 + this.Spent.GetHashCode();
                if (this.CreationTime != null)
                    hash = hash * 59 + this.CreationTime.GetHashCode();
                return hash;
            }
        }
    }

}
