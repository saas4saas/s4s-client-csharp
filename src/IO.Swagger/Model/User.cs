/* 
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Model description
    /// </summary>
    [DataContract]
    public partial class User :  IEquatable<User>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="PrivateData">PrivateData.</param>
        /// <param name="Data">Data.</param>
        /// <param name="AccountId">AccountId.</param>
        /// <param name="Contacts">Contacts.</param>
        /// <param name="Pwd">Pwd.</param>
        /// <param name="Id">Id.</param>
        /// <param name="ApiTkn">ApiTkn.</param>
        /// <param name="GoogleAuth">GoogleAuth.</param>
        /// <param name="Typ">Typ.</param>
        /// <param name="Usr">Usr.</param>
        /// <param name="TenantId">TenantId.</param>
        public User(Dictionary<string, string> PrivateData = null, Dictionary<string, string> Data = null, string AccountId = null, UserContact Contacts = null, string Pwd = null, string Id = null, string ApiTkn = null, GoogleAuth GoogleAuth = null, string Typ = null, string Usr = null, string TenantId = null)
        {
            this.PrivateData = PrivateData;
            this.Data = Data;
            this.AccountId = AccountId;
            this.Contacts = Contacts;
            this.Pwd = Pwd;
            this.Id = Id;
            this.ApiTkn = ApiTkn;
            this.GoogleAuth = GoogleAuth;
            this.Typ = Typ;
            this.Usr = Usr;
            this.TenantId = TenantId;
        }
        
        /// <summary>
        /// Gets or Sets PrivateData
        /// </summary>
        [DataMember(Name="privateData", EmitDefaultValue=false)]
        public Dictionary<string, string> PrivateData { get; set; }
        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public Dictionary<string, string> Data { get; set; }
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }
        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [DataMember(Name="contacts", EmitDefaultValue=false)]
        public UserContact Contacts { get; set; }
        /// <summary>
        /// Gets or Sets Pwd
        /// </summary>
        [DataMember(Name="pwd", EmitDefaultValue=false)]
        public string Pwd { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets ApiTkn
        /// </summary>
        [DataMember(Name="apiTkn", EmitDefaultValue=false)]
        public string ApiTkn { get; set; }
        /// <summary>
        /// Gets or Sets GoogleAuth
        /// </summary>
        [DataMember(Name="googleAuth", EmitDefaultValue=false)]
        public GoogleAuth GoogleAuth { get; set; }
        /// <summary>
        /// Gets or Sets Typ
        /// </summary>
        [DataMember(Name="typ", EmitDefaultValue=false)]
        public string Typ { get; set; }
        /// <summary>
        /// Gets or Sets Usr
        /// </summary>
        [DataMember(Name="usr", EmitDefaultValue=false)]
        public string Usr { get; set; }
        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name="tenantId", EmitDefaultValue=false)]
        public string TenantId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  PrivateData: ").Append(PrivateData).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  Pwd: ").Append(Pwd).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ApiTkn: ").Append(ApiTkn).Append("\n");
            sb.Append("  GoogleAuth: ").Append(GoogleAuth).Append("\n");
            sb.Append("  Typ: ").Append(Typ).Append("\n");
            sb.Append("  Usr: ").Append(Usr).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as User);
        }

        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="other">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PrivateData == other.PrivateData ||
                    this.PrivateData != null &&
                    this.PrivateData.SequenceEqual(other.PrivateData)
                ) && 
                (
                    this.Data == other.Data ||
                    this.Data != null &&
                    this.Data.SequenceEqual(other.Data)
                ) && 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.Contacts == other.Contacts ||
                    this.Contacts != null &&
                    this.Contacts.Equals(other.Contacts)
                ) && 
                (
                    this.Pwd == other.Pwd ||
                    this.Pwd != null &&
                    this.Pwd.Equals(other.Pwd)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.ApiTkn == other.ApiTkn ||
                    this.ApiTkn != null &&
                    this.ApiTkn.Equals(other.ApiTkn)
                ) && 
                (
                    this.GoogleAuth == other.GoogleAuth ||
                    this.GoogleAuth != null &&
                    this.GoogleAuth.Equals(other.GoogleAuth)
                ) && 
                (
                    this.Typ == other.Typ ||
                    this.Typ != null &&
                    this.Typ.Equals(other.Typ)
                ) && 
                (
                    this.Usr == other.Usr ||
                    this.Usr != null &&
                    this.Usr.Equals(other.Usr)
                ) && 
                (
                    this.TenantId == other.TenantId ||
                    this.TenantId != null &&
                    this.TenantId.Equals(other.TenantId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PrivateData != null)
                    hash = hash * 59 + this.PrivateData.GetHashCode();
                if (this.Data != null)
                    hash = hash * 59 + this.Data.GetHashCode();
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.Contacts != null)
                    hash = hash * 59 + this.Contacts.GetHashCode();
                if (this.Pwd != null)
                    hash = hash * 59 + this.Pwd.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.ApiTkn != null)
                    hash = hash * 59 + this.ApiTkn.GetHashCode();
                if (this.GoogleAuth != null)
                    hash = hash * 59 + this.GoogleAuth.GetHashCode();
                if (this.Typ != null)
                    hash = hash * 59 + this.Typ.GetHashCode();
                if (this.Usr != null)
                    hash = hash * 59 + this.Usr.GetHashCode();
                if (this.TenantId != null)
                    hash = hash * 59 + this.TenantId.GetHashCode();
                return hash;
            }
        }
    }

}
