/* 
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Model description
    /// </summary>
    [DataContract]
    public partial class PaymentRequest :  IEquatable<PaymentRequest>
    {
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum Status2WaitPayment for "status2WaitPayment"
            /// </summary>
            [EnumMember(Value = "status2WaitPayment")]
            Status2WaitPayment,
            
            /// <summary>
            /// Enum Status3Canceled for "status3Canceled"
            /// </summary>
            [EnumMember(Value = "status3Canceled")]
            Status3Canceled,
            
            /// <summary>
            /// Enum Status4Paid for "status4Paid"
            /// </summary>
            [EnumMember(Value = "status4Paid")]
            Status4Paid,
            
            /// <summary>
            /// Enum Status1Failed for "status1Failed"
            /// </summary>
            [EnumMember(Value = "status1Failed")]
            Status1Failed,
            
            /// <summary>
            /// Enum Status3Paid for "status3Paid"
            /// </summary>
            [EnumMember(Value = "status3Paid")]
            Status3Paid
        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRequest" /> class.
        /// </summary>
        /// <param name="CreationTimespan">CreationTimespan.</param>
        /// <param name="PaidTimespan">PaidTimespan.</param>
        /// <param name="State">State.</param>
        /// <param name="WhatPays">WhatPays.</param>
        /// <param name="Price">Price.</param>
        /// <param name="BillId">BillId.</param>
        /// <param name="CustomerId">CustomerId.</param>
        /// <param name="Id">Id.</param>
        /// <param name="StripeChargeId">StripeChargeId.</param>
        /// <param name="Currency">Currency.</param>
        /// <param name="Value">Value.</param>
        public PaymentRequest(long? CreationTimespan = null, long? PaidTimespan = null, StateEnum? State = null, Dictionary<string, long?> WhatPays = null, Price Price = null, string BillId = null, string CustomerId = null, string Id = null, string StripeChargeId = null, string Currency = null, long? Value = null)
        {
            this.CreationTimespan = CreationTimespan;
            this.PaidTimespan = PaidTimespan;
            this.State = State;
            this.WhatPays = WhatPays;
            this.Price = Price;
            this.BillId = BillId;
            this.CustomerId = CustomerId;
            this.Id = Id;
            this.StripeChargeId = StripeChargeId;
            this.Currency = Currency;
            this.Value = Value;
        }
        
        /// <summary>
        /// Gets or Sets CreationTimespan
        /// </summary>
        [DataMember(Name="creationTimespan", EmitDefaultValue=false)]
        public long? CreationTimespan { get; set; }
        /// <summary>
        /// Gets or Sets PaidTimespan
        /// </summary>
        [DataMember(Name="paidTimespan", EmitDefaultValue=false)]
        public long? PaidTimespan { get; set; }
        /// <summary>
        /// Gets or Sets WhatPays
        /// </summary>
        [DataMember(Name="whatPays", EmitDefaultValue=false)]
        public Dictionary<string, long?> WhatPays { get; set; }
        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public Price Price { get; set; }
        /// <summary>
        /// Gets or Sets BillId
        /// </summary>
        [DataMember(Name="billId", EmitDefaultValue=false)]
        public string BillId { get; set; }
        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name="customerId", EmitDefaultValue=false)]
        public string CustomerId { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets StripeChargeId
        /// </summary>
        [DataMember(Name="stripeChargeId", EmitDefaultValue=false)]
        public string StripeChargeId { get; set; }
        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public long? Value { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentRequest {\n");
            sb.Append("  CreationTimespan: ").Append(CreationTimespan).Append("\n");
            sb.Append("  PaidTimespan: ").Append(PaidTimespan).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  WhatPays: ").Append(WhatPays).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  BillId: ").Append(BillId).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StripeChargeId: ").Append(StripeChargeId).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PaymentRequest);
        }

        /// <summary>
        /// Returns true if PaymentRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CreationTimespan == other.CreationTimespan ||
                    this.CreationTimespan != null &&
                    this.CreationTimespan.Equals(other.CreationTimespan)
                ) && 
                (
                    this.PaidTimespan == other.PaidTimespan ||
                    this.PaidTimespan != null &&
                    this.PaidTimespan.Equals(other.PaidTimespan)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.WhatPays == other.WhatPays ||
                    this.WhatPays != null &&
                    this.WhatPays.SequenceEqual(other.WhatPays)
                ) && 
                (
                    this.Price == other.Price ||
                    this.Price != null &&
                    this.Price.Equals(other.Price)
                ) && 
                (
                    this.BillId == other.BillId ||
                    this.BillId != null &&
                    this.BillId.Equals(other.BillId)
                ) && 
                (
                    this.CustomerId == other.CustomerId ||
                    this.CustomerId != null &&
                    this.CustomerId.Equals(other.CustomerId)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.StripeChargeId == other.StripeChargeId ||
                    this.StripeChargeId != null &&
                    this.StripeChargeId.Equals(other.StripeChargeId)
                ) && 
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CreationTimespan != null)
                    hash = hash * 59 + this.CreationTimespan.GetHashCode();
                if (this.PaidTimespan != null)
                    hash = hash * 59 + this.PaidTimespan.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.WhatPays != null)
                    hash = hash * 59 + this.WhatPays.GetHashCode();
                if (this.Price != null)
                    hash = hash * 59 + this.Price.GetHashCode();
                if (this.BillId != null)
                    hash = hash * 59 + this.BillId.GetHashCode();
                if (this.CustomerId != null)
                    hash = hash * 59 + this.CustomerId.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.StripeChargeId != null)
                    hash = hash * 59 + this.StripeChargeId.GetHashCode();
                if (this.Currency != null)
                    hash = hash * 59 + this.Currency.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                return hash;
            }
        }
    }

}
