/* 
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Model description
    /// </summary>
    [DataContract]
    public partial class Subscription :  IEquatable<Subscription>
    {
        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PeriodEnum
        {
            
            /// <summary>
            /// Enum Year for "Year"
            /// </summary>
            [EnumMember(Value = "Year")]
            Year,
            
            /// <summary>
            /// Enum Month for "Month"
            /// </summary>
            [EnumMember(Value = "Month")]
            Month,
            
            /// <summary>
            /// Enum Week for "Week"
            /// </summary>
            [EnumMember(Value = "Week")]
            Week,
            
            /// <summary>
            /// Enum Day for "Day"
            /// </summary>
            [EnumMember(Value = "Day")]
            Day
        }

        /// <summary>
        /// Gets or Sets WhenPay
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WhenPayEnum
        {
            
            /// <summary>
            /// Enum EndPeriod for "EndPeriod"
            /// </summary>
            [EnumMember(Value = "EndPeriod")]
            EndPeriod,
            
            /// <summary>
            /// Enum StartPeriod for "StartPeriod"
            /// </summary>
            [EnumMember(Value = "StartPeriod")]
            StartPeriod
        }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public PeriodEnum? Period { get; set; }
        /// <summary>
        /// Gets or Sets WhenPay
        /// </summary>
        [DataMember(Name="whenPay", EmitDefaultValue=false)]
        public WhenPayEnum? WhenPay { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Subscription" /> class.
        /// </summary>
        /// <param name="Period">Period.</param>
        /// <param name="SetupFee">SetupFee.</param>
        /// <param name="PeriodCost">PeriodCost.</param>
        /// <param name="WhenPay">WhenPay.</param>
        public Subscription(PeriodEnum? Period = null, Price SetupFee = null, Price PeriodCost = null, WhenPayEnum? WhenPay = null)
        {
            this.Period = Period;
            this.SetupFee = SetupFee;
            this.PeriodCost = PeriodCost;
            this.WhenPay = WhenPay;
        }
        
        /// <summary>
        /// Gets or Sets SetupFee
        /// </summary>
        [DataMember(Name="setupFee", EmitDefaultValue=false)]
        public Price SetupFee { get; set; }
        /// <summary>
        /// Gets or Sets PeriodCost
        /// </summary>
        [DataMember(Name="periodCost", EmitDefaultValue=false)]
        public Price PeriodCost { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Subscription {\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  SetupFee: ").Append(SetupFee).Append("\n");
            sb.Append("  PeriodCost: ").Append(PeriodCost).Append("\n");
            sb.Append("  WhenPay: ").Append(WhenPay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Subscription);
        }

        /// <summary>
        /// Returns true if Subscription instances are equal
        /// </summary>
        /// <param name="other">Instance of Subscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Subscription other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Period == other.Period ||
                    this.Period != null &&
                    this.Period.Equals(other.Period)
                ) && 
                (
                    this.SetupFee == other.SetupFee ||
                    this.SetupFee != null &&
                    this.SetupFee.Equals(other.SetupFee)
                ) && 
                (
                    this.PeriodCost == other.PeriodCost ||
                    this.PeriodCost != null &&
                    this.PeriodCost.Equals(other.PeriodCost)
                ) && 
                (
                    this.WhenPay == other.WhenPay ||
                    this.WhenPay != null &&
                    this.WhenPay.Equals(other.WhenPay)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Period != null)
                    hash = hash * 59 + this.Period.GetHashCode();
                if (this.SetupFee != null)
                    hash = hash * 59 + this.SetupFee.GetHashCode();
                if (this.PeriodCost != null)
                    hash = hash * 59 + this.PeriodCost.GetHashCode();
                if (this.WhenPay != null)
                    hash = hash * 59 + this.WhenPay.GetHashCode();
                return hash;
            }
        }
    }

}
