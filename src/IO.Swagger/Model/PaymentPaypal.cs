/* 
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Model description
    /// </summary>
    [DataContract]
    public partial class PaymentPaypal :  IEquatable<PaymentPaypal>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentPaypal" /> class.
        /// </summary>
        /// <param name="ClientId">ClientId.</param>
        /// <param name="SandBoxSecret">SandBoxSecret.</param>
        /// <param name="LiveSecret">LiveSecret.</param>
        public PaymentPaypal(string ClientId = null, string SandBoxSecret = null, string LiveSecret = null)
        {
            this.ClientId = ClientId;
            this.SandBoxSecret = SandBoxSecret;
            this.LiveSecret = LiveSecret;
        }
        
        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="clientId", EmitDefaultValue=false)]
        public string ClientId { get; set; }
        /// <summary>
        /// Gets or Sets SandBoxSecret
        /// </summary>
        [DataMember(Name="sandBoxSecret", EmitDefaultValue=false)]
        public string SandBoxSecret { get; set; }
        /// <summary>
        /// Gets or Sets LiveSecret
        /// </summary>
        [DataMember(Name="liveSecret", EmitDefaultValue=false)]
        public string LiveSecret { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentPaypal {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  SandBoxSecret: ").Append(SandBoxSecret).Append("\n");
            sb.Append("  LiveSecret: ").Append(LiveSecret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PaymentPaypal);
        }

        /// <summary>
        /// Returns true if PaymentPaypal instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentPaypal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentPaypal other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ClientId == other.ClientId ||
                    this.ClientId != null &&
                    this.ClientId.Equals(other.ClientId)
                ) && 
                (
                    this.SandBoxSecret == other.SandBoxSecret ||
                    this.SandBoxSecret != null &&
                    this.SandBoxSecret.Equals(other.SandBoxSecret)
                ) && 
                (
                    this.LiveSecret == other.LiveSecret ||
                    this.LiveSecret != null &&
                    this.LiveSecret.Equals(other.LiveSecret)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ClientId != null)
                    hash = hash * 59 + this.ClientId.GetHashCode();
                if (this.SandBoxSecret != null)
                    hash = hash * 59 + this.SandBoxSecret.GetHashCode();
                if (this.LiveSecret != null)
                    hash = hash * 59 + this.LiveSecret.GetHashCode();
                return hash;
            }
        }
    }

}
