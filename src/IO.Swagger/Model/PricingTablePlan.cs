/* 
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Model description
    /// </summary>
    [DataContract]
    public partial class PricingTablePlan :  IEquatable<PricingTablePlan>
    {
        /// <summary>
        /// Gets or Sets Typ
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypEnum
        {
            
            /// <summary>
            /// Enum OneTimePay for "OneTimePay"
            /// </summary>
            [EnumMember(Value = "OneTimePay")]
            OneTimePay,
            
            /// <summary>
            /// Enum Subscription for "Subscription"
            /// </summary>
            [EnumMember(Value = "Subscription")]
            Subscription
        }

        /// <summary>
        /// Gets or Sets Typ
        /// </summary>
        [DataMember(Name="typ", EmitDefaultValue=false)]
        public TypEnum? Typ { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PricingTablePlan" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="CostMain">CostMain.</param>
        /// <param name="Description">Description.</param>
        /// <param name="RequirePaymentMethod">RequirePaymentMethod.</param>
        /// <param name="Id">Id.</param>
        /// <param name="PackId">PackId.</param>
        /// <param name="Typ">Typ.</param>
        /// <param name="CostList">CostList.</param>
        /// <param name="SubscribeUrl">SubscribeUrl.</param>
        public PricingTablePlan(string Name = null, PricingTablePlanCost CostMain = null, string Description = null, bool? RequirePaymentMethod = null, string Id = null, string PackId = null, TypEnum? Typ = null, List<PricingTablePlanCost> CostList = null, string SubscribeUrl = null)
        {
            this.Name = Name;
            this.CostMain = CostMain;
            this.Description = Description;
            this.RequirePaymentMethod = RequirePaymentMethod;
            this.Id = Id;
            this.PackId = PackId;
            this.Typ = Typ;
            this.CostList = CostList;
            this.SubscribeUrl = SubscribeUrl;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets CostMain
        /// </summary>
        [DataMember(Name="costMain", EmitDefaultValue=false)]
        public PricingTablePlanCost CostMain { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets RequirePaymentMethod
        /// </summary>
        [DataMember(Name="requirePaymentMethod", EmitDefaultValue=false)]
        public bool? RequirePaymentMethod { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets PackId
        /// </summary>
        [DataMember(Name="packId", EmitDefaultValue=false)]
        public string PackId { get; set; }
        /// <summary>
        /// Gets or Sets CostList
        /// </summary>
        [DataMember(Name="costList", EmitDefaultValue=false)]
        public List<PricingTablePlanCost> CostList { get; set; }
        /// <summary>
        /// Gets or Sets SubscribeUrl
        /// </summary>
        [DataMember(Name="subscribeUrl", EmitDefaultValue=false)]
        public string SubscribeUrl { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PricingTablePlan {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CostMain: ").Append(CostMain).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RequirePaymentMethod: ").Append(RequirePaymentMethod).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PackId: ").Append(PackId).Append("\n");
            sb.Append("  Typ: ").Append(Typ).Append("\n");
            sb.Append("  CostList: ").Append(CostList).Append("\n");
            sb.Append("  SubscribeUrl: ").Append(SubscribeUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PricingTablePlan);
        }

        /// <summary>
        /// Returns true if PricingTablePlan instances are equal
        /// </summary>
        /// <param name="other">Instance of PricingTablePlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PricingTablePlan other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.CostMain == other.CostMain ||
                    this.CostMain != null &&
                    this.CostMain.Equals(other.CostMain)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.RequirePaymentMethod == other.RequirePaymentMethod ||
                    this.RequirePaymentMethod != null &&
                    this.RequirePaymentMethod.Equals(other.RequirePaymentMethod)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.PackId == other.PackId ||
                    this.PackId != null &&
                    this.PackId.Equals(other.PackId)
                ) && 
                (
                    this.Typ == other.Typ ||
                    this.Typ != null &&
                    this.Typ.Equals(other.Typ)
                ) && 
                (
                    this.CostList == other.CostList ||
                    this.CostList != null &&
                    this.CostList.SequenceEqual(other.CostList)
                ) && 
                (
                    this.SubscribeUrl == other.SubscribeUrl ||
                    this.SubscribeUrl != null &&
                    this.SubscribeUrl.Equals(other.SubscribeUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.CostMain != null)
                    hash = hash * 59 + this.CostMain.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.RequirePaymentMethod != null)
                    hash = hash * 59 + this.RequirePaymentMethod.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.PackId != null)
                    hash = hash * 59 + this.PackId.GetHashCode();
                if (this.Typ != null)
                    hash = hash * 59 + this.Typ.GetHashCode();
                if (this.CostList != null)
                    hash = hash * 59 + this.CostList.GetHashCode();
                if (this.SubscribeUrl != null)
                    hash = hash * 59 + this.SubscribeUrl.GetHashCode();
                return hash;
            }
        }
    }

}
