/* 
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Model description
    /// </summary>
    [DataContract]
    public partial class ResourcePatchResult :  IEquatable<ResourcePatchResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourcePatchResult" /> class.
        /// </summary>
        /// <param name="IsOk">IsOk.</param>
        /// <param name="OldValue">OldValue.</param>
        /// <param name="ActualValue">ActualValue.</param>
        public ResourcePatchResult(bool? IsOk = null, long? OldValue = null, long? ActualValue = null)
        {
            this.IsOk = IsOk;
            this.OldValue = OldValue;
            this.ActualValue = ActualValue;
        }
        
        /// <summary>
        /// Gets or Sets IsOk
        /// </summary>
        [DataMember(Name="isOk", EmitDefaultValue=false)]
        public bool? IsOk { get; set; }
        /// <summary>
        /// Gets or Sets OldValue
        /// </summary>
        [DataMember(Name="oldValue", EmitDefaultValue=false)]
        public long? OldValue { get; set; }
        /// <summary>
        /// Gets or Sets ActualValue
        /// </summary>
        [DataMember(Name="actualValue", EmitDefaultValue=false)]
        public long? ActualValue { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResourcePatchResult {\n");
            sb.Append("  IsOk: ").Append(IsOk).Append("\n");
            sb.Append("  OldValue: ").Append(OldValue).Append("\n");
            sb.Append("  ActualValue: ").Append(ActualValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ResourcePatchResult);
        }

        /// <summary>
        /// Returns true if ResourcePatchResult instances are equal
        /// </summary>
        /// <param name="other">Instance of ResourcePatchResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResourcePatchResult other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.IsOk == other.IsOk ||
                    this.IsOk != null &&
                    this.IsOk.Equals(other.IsOk)
                ) && 
                (
                    this.OldValue == other.OldValue ||
                    this.OldValue != null &&
                    this.OldValue.Equals(other.OldValue)
                ) && 
                (
                    this.ActualValue == other.ActualValue ||
                    this.ActualValue != null &&
                    this.ActualValue.Equals(other.ActualValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.IsOk != null)
                    hash = hash * 59 + this.IsOk.GetHashCode();
                if (this.OldValue != null)
                    hash = hash * 59 + this.OldValue.GetHashCode();
                if (this.ActualValue != null)
                    hash = hash * 59 + this.ActualValue.GetHashCode();
                return hash;
            }
        }
    }

}
