/* 
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Model description
    /// </summary>
    [DataContract]
    public partial class VariableCost :  IEquatable<VariableCost>
    {
        /// <summary>
        /// Gets or Sets Typ
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypEnum
        {
            
            /// <summary>
            /// Enum IntervalCost for "IntervalCost"
            /// </summary>
            [EnumMember(Value = "IntervalCost")]
            IntervalCost,
            
            /// <summary>
            /// Enum IntervalPerUnit for "IntervalPerUnit"
            /// </summary>
            [EnumMember(Value = "IntervalPerUnit")]
            IntervalPerUnit,
            
            /// <summary>
            /// Enum PerUnit for "PerUnit"
            /// </summary>
            [EnumMember(Value = "PerUnit")]
            PerUnit,
            
            /// <summary>
            /// Enum NoCost for "NoCost"
            /// </summary>
            [EnumMember(Value = "NoCost")]
            NoCost
        }

        /// <summary>
        /// Gets or Sets Typ
        /// </summary>
        [DataMember(Name="typ", EmitDefaultValue=false)]
        public TypEnum? Typ { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VariableCost" /> class.
        /// </summary>
        /// <param name="ResourceId">ResourceId.</param>
        /// <param name="PerUnit">PerUnit.</param>
        /// <param name="IntervalCost">IntervalCost.</param>
        /// <param name="IntervalPerUnit">IntervalPerUnit.</param>
        /// <param name="Typ">Typ.</param>
        public VariableCost(string ResourceId = null, VariableCostPerUnit PerUnit = null, VariableCostIntervalCost IntervalCost = null, VariableCostIntervalPerUnit IntervalPerUnit = null, TypEnum? Typ = null)
        {
            this.ResourceId = ResourceId;
            this.PerUnit = PerUnit;
            this.IntervalCost = IntervalCost;
            this.IntervalPerUnit = IntervalPerUnit;
            this.Typ = Typ;
        }
        
        /// <summary>
        /// Gets or Sets ResourceId
        /// </summary>
        [DataMember(Name="resourceId", EmitDefaultValue=false)]
        public string ResourceId { get; set; }
        /// <summary>
        /// Gets or Sets PerUnit
        /// </summary>
        [DataMember(Name="perUnit", EmitDefaultValue=false)]
        public VariableCostPerUnit PerUnit { get; set; }
        /// <summary>
        /// Gets or Sets IntervalCost
        /// </summary>
        [DataMember(Name="intervalCost", EmitDefaultValue=false)]
        public VariableCostIntervalCost IntervalCost { get; set; }
        /// <summary>
        /// Gets or Sets IntervalPerUnit
        /// </summary>
        [DataMember(Name="intervalPerUnit", EmitDefaultValue=false)]
        public VariableCostIntervalPerUnit IntervalPerUnit { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VariableCost {\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  PerUnit: ").Append(PerUnit).Append("\n");
            sb.Append("  IntervalCost: ").Append(IntervalCost).Append("\n");
            sb.Append("  IntervalPerUnit: ").Append(IntervalPerUnit).Append("\n");
            sb.Append("  Typ: ").Append(Typ).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as VariableCost);
        }

        /// <summary>
        /// Returns true if VariableCost instances are equal
        /// </summary>
        /// <param name="other">Instance of VariableCost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VariableCost other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ResourceId == other.ResourceId ||
                    this.ResourceId != null &&
                    this.ResourceId.Equals(other.ResourceId)
                ) && 
                (
                    this.PerUnit == other.PerUnit ||
                    this.PerUnit != null &&
                    this.PerUnit.Equals(other.PerUnit)
                ) && 
                (
                    this.IntervalCost == other.IntervalCost ||
                    this.IntervalCost != null &&
                    this.IntervalCost.Equals(other.IntervalCost)
                ) && 
                (
                    this.IntervalPerUnit == other.IntervalPerUnit ||
                    this.IntervalPerUnit != null &&
                    this.IntervalPerUnit.Equals(other.IntervalPerUnit)
                ) && 
                (
                    this.Typ == other.Typ ||
                    this.Typ != null &&
                    this.Typ.Equals(other.Typ)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ResourceId != null)
                    hash = hash * 59 + this.ResourceId.GetHashCode();
                if (this.PerUnit != null)
                    hash = hash * 59 + this.PerUnit.GetHashCode();
                if (this.IntervalCost != null)
                    hash = hash * 59 + this.IntervalCost.GetHashCode();
                if (this.IntervalPerUnit != null)
                    hash = hash * 59 + this.IntervalPerUnit.GetHashCode();
                if (this.Typ != null)
                    hash = hash * 59 + this.Typ.GetHashCode();
                return hash;
            }
        }
    }

}
