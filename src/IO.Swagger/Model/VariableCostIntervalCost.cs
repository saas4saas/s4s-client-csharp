/* 
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Model description
    /// </summary>
    [DataContract]
    public partial class VariableCostIntervalCost :  IEquatable<VariableCostIntervalCost>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VariableCostIntervalCost" /> class.
        /// </summary>
        /// <param name="Intervals">Intervals.</param>
        /// <param name="HasFinalInterval">HasFinalInterval.</param>
        /// <param name="FinalInterval">FinalInterval.</param>
        public VariableCostIntervalCost(List<QuantiyIntervalPrice> Intervals = null, bool? HasFinalInterval = null, FinalInterval FinalInterval = null)
        {
            this.Intervals = Intervals;
            this.HasFinalInterval = HasFinalInterval;
            this.FinalInterval = FinalInterval;
        }
        
        /// <summary>
        /// Gets or Sets Intervals
        /// </summary>
        [DataMember(Name="intervals", EmitDefaultValue=false)]
        public List<QuantiyIntervalPrice> Intervals { get; set; }
        /// <summary>
        /// Gets or Sets HasFinalInterval
        /// </summary>
        [DataMember(Name="hasFinalInterval", EmitDefaultValue=false)]
        public bool? HasFinalInterval { get; set; }
        /// <summary>
        /// Gets or Sets FinalInterval
        /// </summary>
        [DataMember(Name="finalInterval", EmitDefaultValue=false)]
        public FinalInterval FinalInterval { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VariableCostIntervalCost {\n");
            sb.Append("  Intervals: ").Append(Intervals).Append("\n");
            sb.Append("  HasFinalInterval: ").Append(HasFinalInterval).Append("\n");
            sb.Append("  FinalInterval: ").Append(FinalInterval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as VariableCostIntervalCost);
        }

        /// <summary>
        /// Returns true if VariableCostIntervalCost instances are equal
        /// </summary>
        /// <param name="other">Instance of VariableCostIntervalCost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VariableCostIntervalCost other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Intervals == other.Intervals ||
                    this.Intervals != null &&
                    this.Intervals.SequenceEqual(other.Intervals)
                ) && 
                (
                    this.HasFinalInterval == other.HasFinalInterval ||
                    this.HasFinalInterval != null &&
                    this.HasFinalInterval.Equals(other.HasFinalInterval)
                ) && 
                (
                    this.FinalInterval == other.FinalInterval ||
                    this.FinalInterval != null &&
                    this.FinalInterval.Equals(other.FinalInterval)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Intervals != null)
                    hash = hash * 59 + this.Intervals.GetHashCode();
                if (this.HasFinalInterval != null)
                    hash = hash * 59 + this.HasFinalInterval.GetHashCode();
                if (this.FinalInterval != null)
                    hash = hash * 59 + this.FinalInterval.GetHashCode();
                return hash;
            }
        }
    }

}
