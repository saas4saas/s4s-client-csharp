/* 
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Model description
    /// </summary>
    [DataContract]
    public partial class StripeAccessCode :  IEquatable<StripeAccessCode>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StripeAccessCode" /> class.
        /// </summary>
        /// <param name="AccessToken">AccessToken.</param>
        /// <param name="StripePublishableKey">StripePublishableKey.</param>
        /// <param name="Scope">Scope.</param>
        /// <param name="RefreshToken">RefreshToken.</param>
        /// <param name="TokenType">TokenType.</param>
        /// <param name="StripeUserId">StripeUserId.</param>
        /// <param name="Livemode">Livemode.</param>
        public StripeAccessCode(string AccessToken = null, string StripePublishableKey = null, string Scope = null, string RefreshToken = null, string TokenType = null, string StripeUserId = null, bool? Livemode = null)
        {
            this.AccessToken = AccessToken;
            this.StripePublishableKey = StripePublishableKey;
            this.Scope = Scope;
            this.RefreshToken = RefreshToken;
            this.TokenType = TokenType;
            this.StripeUserId = StripeUserId;
            this.Livemode = Livemode;
        }
        
        /// <summary>
        /// Gets or Sets AccessToken
        /// </summary>
        [DataMember(Name="access_token", EmitDefaultValue=false)]
        public string AccessToken { get; set; }
        /// <summary>
        /// Gets or Sets StripePublishableKey
        /// </summary>
        [DataMember(Name="stripe_publishable_key", EmitDefaultValue=false)]
        public string StripePublishableKey { get; set; }
        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public string Scope { get; set; }
        /// <summary>
        /// Gets or Sets RefreshToken
        /// </summary>
        [DataMember(Name="refresh_token", EmitDefaultValue=false)]
        public string RefreshToken { get; set; }
        /// <summary>
        /// Gets or Sets TokenType
        /// </summary>
        [DataMember(Name="token_type", EmitDefaultValue=false)]
        public string TokenType { get; set; }
        /// <summary>
        /// Gets or Sets StripeUserId
        /// </summary>
        [DataMember(Name="stripe_user_id", EmitDefaultValue=false)]
        public string StripeUserId { get; set; }
        /// <summary>
        /// Gets or Sets Livemode
        /// </summary>
        [DataMember(Name="livemode", EmitDefaultValue=false)]
        public bool? Livemode { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StripeAccessCode {\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  StripePublishableKey: ").Append(StripePublishableKey).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("  StripeUserId: ").Append(StripeUserId).Append("\n");
            sb.Append("  Livemode: ").Append(Livemode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as StripeAccessCode);
        }

        /// <summary>
        /// Returns true if StripeAccessCode instances are equal
        /// </summary>
        /// <param name="other">Instance of StripeAccessCode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StripeAccessCode other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccessToken == other.AccessToken ||
                    this.AccessToken != null &&
                    this.AccessToken.Equals(other.AccessToken)
                ) && 
                (
                    this.StripePublishableKey == other.StripePublishableKey ||
                    this.StripePublishableKey != null &&
                    this.StripePublishableKey.Equals(other.StripePublishableKey)
                ) && 
                (
                    this.Scope == other.Scope ||
                    this.Scope != null &&
                    this.Scope.Equals(other.Scope)
                ) && 
                (
                    this.RefreshToken == other.RefreshToken ||
                    this.RefreshToken != null &&
                    this.RefreshToken.Equals(other.RefreshToken)
                ) && 
                (
                    this.TokenType == other.TokenType ||
                    this.TokenType != null &&
                    this.TokenType.Equals(other.TokenType)
                ) && 
                (
                    this.StripeUserId == other.StripeUserId ||
                    this.StripeUserId != null &&
                    this.StripeUserId.Equals(other.StripeUserId)
                ) && 
                (
                    this.Livemode == other.Livemode ||
                    this.Livemode != null &&
                    this.Livemode.Equals(other.Livemode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccessToken != null)
                    hash = hash * 59 + this.AccessToken.GetHashCode();
                if (this.StripePublishableKey != null)
                    hash = hash * 59 + this.StripePublishableKey.GetHashCode();
                if (this.Scope != null)
                    hash = hash * 59 + this.Scope.GetHashCode();
                if (this.RefreshToken != null)
                    hash = hash * 59 + this.RefreshToken.GetHashCode();
                if (this.TokenType != null)
                    hash = hash * 59 + this.TokenType.GetHashCode();
                if (this.StripeUserId != null)
                    hash = hash * 59 + this.StripeUserId.GetHashCode();
                if (this.Livemode != null)
                    hash = hash * 59 + this.Livemode.GetHashCode();
                return hash;
            }
        }
    }

}
