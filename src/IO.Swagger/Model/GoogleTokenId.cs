/* 
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Model description
    /// </summary>
    [DataContract]
    public partial class GoogleTokenId :  IEquatable<GoogleTokenId>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GoogleTokenId" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="EmailVerified">EmailVerified.</param>
        /// <param name="Email">Email.</param>
        /// <param name="Exp">Exp.</param>
        /// <param name="Profile">Profile.</param>
        /// <param name="Picture">Picture.</param>
        /// <param name="Iat">Iat.</param>
        /// <param name="Sub">Sub.</param>
        /// <param name="AtHash">AtHash.</param>
        /// <param name="Azp">Azp.</param>
        /// <param name="Aud">Aud.</param>
        /// <param name="Hd">Hd.</param>
        /// <param name="Iss">Iss.</param>
        public GoogleTokenId(string Name = null, bool? EmailVerified = null, string Email = null, long? Exp = null, string Profile = null, string Picture = null, long? Iat = null, string Sub = null, string AtHash = null, string Azp = null, string Aud = null, string Hd = null, string Iss = null)
        {
            this.Name = Name;
            this.EmailVerified = EmailVerified;
            this.Email = Email;
            this.Exp = Exp;
            this.Profile = Profile;
            this.Picture = Picture;
            this.Iat = Iat;
            this.Sub = Sub;
            this.AtHash = AtHash;
            this.Azp = Azp;
            this.Aud = Aud;
            this.Hd = Hd;
            this.Iss = Iss;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets EmailVerified
        /// </summary>
        [DataMember(Name="email_verified", EmitDefaultValue=false)]
        public bool? EmailVerified { get; set; }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Gets or Sets Exp
        /// </summary>
        [DataMember(Name="exp", EmitDefaultValue=false)]
        public long? Exp { get; set; }
        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [DataMember(Name="profile", EmitDefaultValue=false)]
        public string Profile { get; set; }
        /// <summary>
        /// Gets or Sets Picture
        /// </summary>
        [DataMember(Name="picture", EmitDefaultValue=false)]
        public string Picture { get; set; }
        /// <summary>
        /// Gets or Sets Iat
        /// </summary>
        [DataMember(Name="iat", EmitDefaultValue=false)]
        public long? Iat { get; set; }
        /// <summary>
        /// Gets or Sets Sub
        /// </summary>
        [DataMember(Name="sub", EmitDefaultValue=false)]
        public string Sub { get; set; }
        /// <summary>
        /// Gets or Sets AtHash
        /// </summary>
        [DataMember(Name="at_hash", EmitDefaultValue=false)]
        public string AtHash { get; set; }
        /// <summary>
        /// Gets or Sets Azp
        /// </summary>
        [DataMember(Name="azp", EmitDefaultValue=false)]
        public string Azp { get; set; }
        /// <summary>
        /// Gets or Sets Aud
        /// </summary>
        [DataMember(Name="aud", EmitDefaultValue=false)]
        public string Aud { get; set; }
        /// <summary>
        /// Gets or Sets Hd
        /// </summary>
        [DataMember(Name="hd", EmitDefaultValue=false)]
        public string Hd { get; set; }
        /// <summary>
        /// Gets or Sets Iss
        /// </summary>
        [DataMember(Name="iss", EmitDefaultValue=false)]
        public string Iss { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GoogleTokenId {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EmailVerified: ").Append(EmailVerified).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Exp: ").Append(Exp).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  Picture: ").Append(Picture).Append("\n");
            sb.Append("  Iat: ").Append(Iat).Append("\n");
            sb.Append("  Sub: ").Append(Sub).Append("\n");
            sb.Append("  AtHash: ").Append(AtHash).Append("\n");
            sb.Append("  Azp: ").Append(Azp).Append("\n");
            sb.Append("  Aud: ").Append(Aud).Append("\n");
            sb.Append("  Hd: ").Append(Hd).Append("\n");
            sb.Append("  Iss: ").Append(Iss).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GoogleTokenId);
        }

        /// <summary>
        /// Returns true if GoogleTokenId instances are equal
        /// </summary>
        /// <param name="other">Instance of GoogleTokenId to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GoogleTokenId other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.EmailVerified == other.EmailVerified ||
                    this.EmailVerified != null &&
                    this.EmailVerified.Equals(other.EmailVerified)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Exp == other.Exp ||
                    this.Exp != null &&
                    this.Exp.Equals(other.Exp)
                ) && 
                (
                    this.Profile == other.Profile ||
                    this.Profile != null &&
                    this.Profile.Equals(other.Profile)
                ) && 
                (
                    this.Picture == other.Picture ||
                    this.Picture != null &&
                    this.Picture.Equals(other.Picture)
                ) && 
                (
                    this.Iat == other.Iat ||
                    this.Iat != null &&
                    this.Iat.Equals(other.Iat)
                ) && 
                (
                    this.Sub == other.Sub ||
                    this.Sub != null &&
                    this.Sub.Equals(other.Sub)
                ) && 
                (
                    this.AtHash == other.AtHash ||
                    this.AtHash != null &&
                    this.AtHash.Equals(other.AtHash)
                ) && 
                (
                    this.Azp == other.Azp ||
                    this.Azp != null &&
                    this.Azp.Equals(other.Azp)
                ) && 
                (
                    this.Aud == other.Aud ||
                    this.Aud != null &&
                    this.Aud.Equals(other.Aud)
                ) && 
                (
                    this.Hd == other.Hd ||
                    this.Hd != null &&
                    this.Hd.Equals(other.Hd)
                ) && 
                (
                    this.Iss == other.Iss ||
                    this.Iss != null &&
                    this.Iss.Equals(other.Iss)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.EmailVerified != null)
                    hash = hash * 59 + this.EmailVerified.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Exp != null)
                    hash = hash * 59 + this.Exp.GetHashCode();
                if (this.Profile != null)
                    hash = hash * 59 + this.Profile.GetHashCode();
                if (this.Picture != null)
                    hash = hash * 59 + this.Picture.GetHashCode();
                if (this.Iat != null)
                    hash = hash * 59 + this.Iat.GetHashCode();
                if (this.Sub != null)
                    hash = hash * 59 + this.Sub.GetHashCode();
                if (this.AtHash != null)
                    hash = hash * 59 + this.AtHash.GetHashCode();
                if (this.Azp != null)
                    hash = hash * 59 + this.Azp.GetHashCode();
                if (this.Aud != null)
                    hash = hash * 59 + this.Aud.GetHashCode();
                if (this.Hd != null)
                    hash = hash * 59 + this.Hd.GetHashCode();
                if (this.Iss != null)
                    hash = hash * 59 + this.Iss.GetHashCode();
                return hash;
            }
        }
    }

}
