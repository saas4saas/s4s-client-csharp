/* 
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISsPaymentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PaymentConf</returns>
        PaymentConf Conf ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PaymentConf</returns>
        ApiResponse<PaymentConf> ConfWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="currency"></param>
        /// <returns>string</returns>
        string CustomerInfoCurrency (string customerId, string currency);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="currency"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CustomerInfoCurrencyWithHttpInfo (string customerId, string currency);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>CustomerInfo</returns>
        CustomerInfo CustomerInfoGet (string customerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>ApiResponse of CustomerInfo</returns>
        ApiResponse<CustomerInfo> CustomerInfoGetWithHttpInfo (string customerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>bool?</returns>
        bool? CustomerInfoHasPaymentInfo (string customerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> CustomerInfoHasPaymentInfoWithHttpInfo (string customerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="stripeCustomer"> (optional)</param>
        /// <returns>string</returns>
        string CustomerInfoStripeCustomer (string customerId, StripeCustomer stripeCustomer = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="stripeCustomer"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CustomerInfoStripeCustomerWithHttpInfo (string customerId, StripeCustomer stripeCustomer = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentRequest"> (optional)</param>
        /// <returns>PaymentRequest</returns>
        PaymentRequest CustomerPaymentAdd (string customerId, PaymentRequest paymentRequest = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentRequest"> (optional)</param>
        /// <returns>ApiResponse of PaymentRequest</returns>
        ApiResponse<PaymentRequest> CustomerPaymentAddWithHttpInfo (string customerId, PaymentRequest paymentRequest = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentId"></param>
        /// <returns>string</returns>
        string CustomerPaymentCancelPatch (string customerId, string paymentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentId"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CustomerPaymentCancelPatchWithHttpInfo (string customerId, string paymentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentId"></param>
        /// <returns>PaymentRequest</returns>
        PaymentRequest CustomerPaymentGet (string customerId, string paymentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentId"></param>
        /// <returns>ApiResponse of PaymentRequest</returns>
        ApiResponse<PaymentRequest> CustomerPaymentGetWithHttpInfo (string customerId, string paymentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentId"></param>
        /// <returns>PaymentRequest</returns>
        PaymentRequest CustomerPaymentPayPatch (string customerId, string paymentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentId"></param>
        /// <returns>ApiResponse of PaymentRequest</returns>
        ApiResponse<PaymentRequest> CustomerPaymentPayPatchWithHttpInfo (string customerId, string paymentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns></returns>
        void CustomerPaymentValues (string customerId, int? page, int? numberPerPage);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomerPaymentValuesWithHttpInfo (string customerId, int? page, int? numberPerPage);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PaymentConf</returns>
        PaymentConf PaymentConfigGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PaymentConf</returns>
        ApiResponse<PaymentConf> PaymentConfigGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>string</returns>
        string PaymentConfigPut (PaymentConf a = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PaymentConfigPutWithHttpInfo (PaymentConf a = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns></returns>
        void PaymentGetAll (int? page, int? numberPerPage);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PaymentGetAllWithHttpInfo (int? page, int? numberPerPage);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PaymentConf</returns>
        System.Threading.Tasks.Task<PaymentConf> ConfAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PaymentConf)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentConf>> ConfAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="currency"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CustomerInfoCurrencyAsync (string customerId, string currency);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="currency"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CustomerInfoCurrencyAsyncWithHttpInfo (string customerId, string currency);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of CustomerInfo</returns>
        System.Threading.Tasks.Task<CustomerInfo> CustomerInfoGetAsync (string customerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of ApiResponse (CustomerInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerInfo>> CustomerInfoGetAsyncWithHttpInfo (string customerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> CustomerInfoHasPaymentInfoAsync (string customerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> CustomerInfoHasPaymentInfoAsyncWithHttpInfo (string customerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="stripeCustomer"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CustomerInfoStripeCustomerAsync (string customerId, StripeCustomer stripeCustomer = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="stripeCustomer"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CustomerInfoStripeCustomerAsyncWithHttpInfo (string customerId, StripeCustomer stripeCustomer = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentRequest"> (optional)</param>
        /// <returns>Task of PaymentRequest</returns>
        System.Threading.Tasks.Task<PaymentRequest> CustomerPaymentAddAsync (string customerId, PaymentRequest paymentRequest = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (PaymentRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentRequest>> CustomerPaymentAddAsyncWithHttpInfo (string customerId, PaymentRequest paymentRequest = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentId"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CustomerPaymentCancelPatchAsync (string customerId, string paymentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentId"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CustomerPaymentCancelPatchAsyncWithHttpInfo (string customerId, string paymentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentId"></param>
        /// <returns>Task of PaymentRequest</returns>
        System.Threading.Tasks.Task<PaymentRequest> CustomerPaymentGetAsync (string customerId, string paymentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentId"></param>
        /// <returns>Task of ApiResponse (PaymentRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentRequest>> CustomerPaymentGetAsyncWithHttpInfo (string customerId, string paymentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentId"></param>
        /// <returns>Task of PaymentRequest</returns>
        System.Threading.Tasks.Task<PaymentRequest> CustomerPaymentPayPatchAsync (string customerId, string paymentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentId"></param>
        /// <returns>Task of ApiResponse (PaymentRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentRequest>> CustomerPaymentPayPatchAsyncWithHttpInfo (string customerId, string paymentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomerPaymentValuesAsync (string customerId, int? page, int? numberPerPage);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomerPaymentValuesAsyncWithHttpInfo (string customerId, int? page, int? numberPerPage);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PaymentConf</returns>
        System.Threading.Tasks.Task<PaymentConf> PaymentConfigGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PaymentConf)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentConf>> PaymentConfigGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PaymentConfigPutAsync (PaymentConf a = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PaymentConfigPutAsyncWithHttpInfo (PaymentConf a = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PaymentGetAllAsync (int? page, int? numberPerPage);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PaymentGetAllAsyncWithHttpInfo (int? page, int? numberPerPage);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SsPaymentApi : ISsPaymentApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SsPaymentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SsPaymentApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SsPaymentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SsPaymentApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PaymentConf</returns>
        public PaymentConf Conf ()
        {
             ApiResponse<PaymentConf> localVarResponse = ConfWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PaymentConf</returns>
        public ApiResponse< PaymentConf > ConfWithHttpInfo ()
        {

            var localVarPath = "/s4s-payment/conf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Conf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentConf>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentConf) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentConf)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PaymentConf</returns>
        public async System.Threading.Tasks.Task<PaymentConf> ConfAsync ()
        {
             ApiResponse<PaymentConf> localVarResponse = await ConfAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PaymentConf)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentConf>> ConfAsyncWithHttpInfo ()
        {

            var localVarPath = "/s4s-payment/conf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Conf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentConf>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentConf) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentConf)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="currency"></param>
        /// <returns>string</returns>
        public string CustomerInfoCurrency (string customerId, string currency)
        {
             ApiResponse<string> localVarResponse = CustomerInfoCurrencyWithHttpInfo(customerId, currency);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="currency"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CustomerInfoCurrencyWithHttpInfo (string customerId, string currency)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPaymentApi->CustomerInfoCurrency");
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling SsPaymentApi->CustomerInfoCurrency");

            var localVarPath = "/s4s-payment/customer/{customer-id}/info/currency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (currency != null) localVarQueryParams.Add("currency", Configuration.ApiClient.ParameterToString(currency)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerInfoCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="currency"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CustomerInfoCurrencyAsync (string customerId, string currency)
        {
             ApiResponse<string> localVarResponse = await CustomerInfoCurrencyAsyncWithHttpInfo(customerId, currency);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="currency"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CustomerInfoCurrencyAsyncWithHttpInfo (string customerId, string currency)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPaymentApi->CustomerInfoCurrency");
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling SsPaymentApi->CustomerInfoCurrency");

            var localVarPath = "/s4s-payment/customer/{customer-id}/info/currency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (currency != null) localVarQueryParams.Add("currency", Configuration.ApiClient.ParameterToString(currency)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerInfoCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>CustomerInfo</returns>
        public CustomerInfo CustomerInfoGet (string customerId)
        {
             ApiResponse<CustomerInfo> localVarResponse = CustomerInfoGetWithHttpInfo(customerId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>ApiResponse of CustomerInfo</returns>
        public ApiResponse< CustomerInfo > CustomerInfoGetWithHttpInfo (string customerId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPaymentApi->CustomerInfoGet");

            var localVarPath = "/s4s-payment/customer/{customer-id}/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerInfoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerInfo)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of CustomerInfo</returns>
        public async System.Threading.Tasks.Task<CustomerInfo> CustomerInfoGetAsync (string customerId)
        {
             ApiResponse<CustomerInfo> localVarResponse = await CustomerInfoGetAsyncWithHttpInfo(customerId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of ApiResponse (CustomerInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerInfo>> CustomerInfoGetAsyncWithHttpInfo (string customerId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPaymentApi->CustomerInfoGet");

            var localVarPath = "/s4s-payment/customer/{customer-id}/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerInfoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerInfo)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>bool?</returns>
        public bool? CustomerInfoHasPaymentInfo (string customerId)
        {
             ApiResponse<bool?> localVarResponse = CustomerInfoHasPaymentInfoWithHttpInfo(customerId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > CustomerInfoHasPaymentInfoWithHttpInfo (string customerId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPaymentApi->CustomerInfoHasPaymentInfo");

            var localVarPath = "/s4s-payment/customer/{customer-id}/info/hasPaymentInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerInfoHasPaymentInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> CustomerInfoHasPaymentInfoAsync (string customerId)
        {
             ApiResponse<bool?> localVarResponse = await CustomerInfoHasPaymentInfoAsyncWithHttpInfo(customerId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> CustomerInfoHasPaymentInfoAsyncWithHttpInfo (string customerId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPaymentApi->CustomerInfoHasPaymentInfo");

            var localVarPath = "/s4s-payment/customer/{customer-id}/info/hasPaymentInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerInfoHasPaymentInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="stripeCustomer"> (optional)</param>
        /// <returns>string</returns>
        public string CustomerInfoStripeCustomer (string customerId, StripeCustomer stripeCustomer = null)
        {
             ApiResponse<string> localVarResponse = CustomerInfoStripeCustomerWithHttpInfo(customerId, stripeCustomer);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="stripeCustomer"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CustomerInfoStripeCustomerWithHttpInfo (string customerId, StripeCustomer stripeCustomer = null)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPaymentApi->CustomerInfoStripeCustomer");

            var localVarPath = "/s4s-payment/customer/{customer-id}/info/stripeCustomer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (stripeCustomer != null && stripeCustomer.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(stripeCustomer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stripeCustomer; // byte array
            }

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerInfoStripeCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="stripeCustomer"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CustomerInfoStripeCustomerAsync (string customerId, StripeCustomer stripeCustomer = null)
        {
             ApiResponse<string> localVarResponse = await CustomerInfoStripeCustomerAsyncWithHttpInfo(customerId, stripeCustomer);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="stripeCustomer"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CustomerInfoStripeCustomerAsyncWithHttpInfo (string customerId, StripeCustomer stripeCustomer = null)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPaymentApi->CustomerInfoStripeCustomer");

            var localVarPath = "/s4s-payment/customer/{customer-id}/info/stripeCustomer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (stripeCustomer != null && stripeCustomer.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(stripeCustomer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stripeCustomer; // byte array
            }

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerInfoStripeCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentRequest"> (optional)</param>
        /// <returns>PaymentRequest</returns>
        public PaymentRequest CustomerPaymentAdd (string customerId, PaymentRequest paymentRequest = null)
        {
             ApiResponse<PaymentRequest> localVarResponse = CustomerPaymentAddWithHttpInfo(customerId, paymentRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentRequest"> (optional)</param>
        /// <returns>ApiResponse of PaymentRequest</returns>
        public ApiResponse< PaymentRequest > CustomerPaymentAddWithHttpInfo (string customerId, PaymentRequest paymentRequest = null)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPaymentApi->CustomerPaymentAdd");

            var localVarPath = "/s4s-payment/customer/{customer-id}/payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (paymentRequest != null && paymentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(paymentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentRequest; // byte array
            }

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPaymentAdd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentRequest) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentRequest)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentRequest"> (optional)</param>
        /// <returns>Task of PaymentRequest</returns>
        public async System.Threading.Tasks.Task<PaymentRequest> CustomerPaymentAddAsync (string customerId, PaymentRequest paymentRequest = null)
        {
             ApiResponse<PaymentRequest> localVarResponse = await CustomerPaymentAddAsyncWithHttpInfo(customerId, paymentRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (PaymentRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentRequest>> CustomerPaymentAddAsyncWithHttpInfo (string customerId, PaymentRequest paymentRequest = null)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPaymentApi->CustomerPaymentAdd");

            var localVarPath = "/s4s-payment/customer/{customer-id}/payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (paymentRequest != null && paymentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(paymentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentRequest; // byte array
            }

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPaymentAdd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentRequest) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentRequest)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentId"></param>
        /// <returns>string</returns>
        public string CustomerPaymentCancelPatch (string customerId, string paymentId)
        {
             ApiResponse<string> localVarResponse = CustomerPaymentCancelPatchWithHttpInfo(customerId, paymentId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentId"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CustomerPaymentCancelPatchWithHttpInfo (string customerId, string paymentId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPaymentApi->CustomerPaymentCancelPatch");
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new ApiException(400, "Missing required parameter 'paymentId' when calling SsPaymentApi->CustomerPaymentCancelPatch");

            var localVarPath = "/s4s-payment/customer/{customer-id}/payment/{payment-id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (paymentId != null) localVarPathParams.Add("payment-id", Configuration.ApiClient.ParameterToString(paymentId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPaymentCancelPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentId"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CustomerPaymentCancelPatchAsync (string customerId, string paymentId)
        {
             ApiResponse<string> localVarResponse = await CustomerPaymentCancelPatchAsyncWithHttpInfo(customerId, paymentId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentId"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CustomerPaymentCancelPatchAsyncWithHttpInfo (string customerId, string paymentId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPaymentApi->CustomerPaymentCancelPatch");
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new ApiException(400, "Missing required parameter 'paymentId' when calling SsPaymentApi->CustomerPaymentCancelPatch");

            var localVarPath = "/s4s-payment/customer/{customer-id}/payment/{payment-id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (paymentId != null) localVarPathParams.Add("payment-id", Configuration.ApiClient.ParameterToString(paymentId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPaymentCancelPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentId"></param>
        /// <returns>PaymentRequest</returns>
        public PaymentRequest CustomerPaymentGet (string customerId, string paymentId)
        {
             ApiResponse<PaymentRequest> localVarResponse = CustomerPaymentGetWithHttpInfo(customerId, paymentId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentId"></param>
        /// <returns>ApiResponse of PaymentRequest</returns>
        public ApiResponse< PaymentRequest > CustomerPaymentGetWithHttpInfo (string customerId, string paymentId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPaymentApi->CustomerPaymentGet");
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new ApiException(400, "Missing required parameter 'paymentId' when calling SsPaymentApi->CustomerPaymentGet");

            var localVarPath = "/s4s-payment/customer/{customer-id}/payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (paymentId != null) localVarQueryParams.Add("payment-id", Configuration.ApiClient.ParameterToString(paymentId)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPaymentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentRequest) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentRequest)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentId"></param>
        /// <returns>Task of PaymentRequest</returns>
        public async System.Threading.Tasks.Task<PaymentRequest> CustomerPaymentGetAsync (string customerId, string paymentId)
        {
             ApiResponse<PaymentRequest> localVarResponse = await CustomerPaymentGetAsyncWithHttpInfo(customerId, paymentId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentId"></param>
        /// <returns>Task of ApiResponse (PaymentRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentRequest>> CustomerPaymentGetAsyncWithHttpInfo (string customerId, string paymentId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPaymentApi->CustomerPaymentGet");
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new ApiException(400, "Missing required parameter 'paymentId' when calling SsPaymentApi->CustomerPaymentGet");

            var localVarPath = "/s4s-payment/customer/{customer-id}/payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (paymentId != null) localVarQueryParams.Add("payment-id", Configuration.ApiClient.ParameterToString(paymentId)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPaymentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentRequest) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentRequest)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentId"></param>
        /// <returns>PaymentRequest</returns>
        public PaymentRequest CustomerPaymentPayPatch (string customerId, string paymentId)
        {
             ApiResponse<PaymentRequest> localVarResponse = CustomerPaymentPayPatchWithHttpInfo(customerId, paymentId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentId"></param>
        /// <returns>ApiResponse of PaymentRequest</returns>
        public ApiResponse< PaymentRequest > CustomerPaymentPayPatchWithHttpInfo (string customerId, string paymentId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPaymentApi->CustomerPaymentPayPatch");
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new ApiException(400, "Missing required parameter 'paymentId' when calling SsPaymentApi->CustomerPaymentPayPatch");

            var localVarPath = "/s4s-payment/customer/{customer-id}/payment/{payment-id}/pay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (paymentId != null) localVarPathParams.Add("payment-id", Configuration.ApiClient.ParameterToString(paymentId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPaymentPayPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentRequest) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentRequest)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentId"></param>
        /// <returns>Task of PaymentRequest</returns>
        public async System.Threading.Tasks.Task<PaymentRequest> CustomerPaymentPayPatchAsync (string customerId, string paymentId)
        {
             ApiResponse<PaymentRequest> localVarResponse = await CustomerPaymentPayPatchAsyncWithHttpInfo(customerId, paymentId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="paymentId"></param>
        /// <returns>Task of ApiResponse (PaymentRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentRequest>> CustomerPaymentPayPatchAsyncWithHttpInfo (string customerId, string paymentId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPaymentApi->CustomerPaymentPayPatch");
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new ApiException(400, "Missing required parameter 'paymentId' when calling SsPaymentApi->CustomerPaymentPayPatch");

            var localVarPath = "/s4s-payment/customer/{customer-id}/payment/{payment-id}/pay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (paymentId != null) localVarPathParams.Add("payment-id", Configuration.ApiClient.ParameterToString(paymentId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPaymentPayPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentRequest) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentRequest)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns></returns>
        public void CustomerPaymentValues (string customerId, int? page, int? numberPerPage)
        {
             CustomerPaymentValuesWithHttpInfo(customerId, page, numberPerPage);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomerPaymentValuesWithHttpInfo (string customerId, int? page, int? numberPerPage)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPaymentApi->CustomerPaymentValues");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling SsPaymentApi->CustomerPaymentValues");
            // verify the required parameter 'numberPerPage' is set
            if (numberPerPage == null)
                throw new ApiException(400, "Missing required parameter 'numberPerPage' when calling SsPaymentApi->CustomerPaymentValues");

            var localVarPath = "/s4s-payment/customer/{customer-id}/payment/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (numberPerPage != null) localVarQueryParams.Add("number-per-page", Configuration.ApiClient.ParameterToString(numberPerPage)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPaymentValues", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomerPaymentValuesAsync (string customerId, int? page, int? numberPerPage)
        {
             await CustomerPaymentValuesAsyncWithHttpInfo(customerId, page, numberPerPage);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomerPaymentValuesAsyncWithHttpInfo (string customerId, int? page, int? numberPerPage)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPaymentApi->CustomerPaymentValues");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling SsPaymentApi->CustomerPaymentValues");
            // verify the required parameter 'numberPerPage' is set
            if (numberPerPage == null)
                throw new ApiException(400, "Missing required parameter 'numberPerPage' when calling SsPaymentApi->CustomerPaymentValues");

            var localVarPath = "/s4s-payment/customer/{customer-id}/payment/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (numberPerPage != null) localVarQueryParams.Add("number-per-page", Configuration.ApiClient.ParameterToString(numberPerPage)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPaymentValues", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PaymentConf</returns>
        public PaymentConf PaymentConfigGet ()
        {
             ApiResponse<PaymentConf> localVarResponse = PaymentConfigGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PaymentConf</returns>
        public ApiResponse< PaymentConf > PaymentConfigGetWithHttpInfo ()
        {

            var localVarPath = "/s4s-payment/paymentConfig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentConfigGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentConf>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentConf) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentConf)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PaymentConf</returns>
        public async System.Threading.Tasks.Task<PaymentConf> PaymentConfigGetAsync ()
        {
             ApiResponse<PaymentConf> localVarResponse = await PaymentConfigGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PaymentConf)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentConf>> PaymentConfigGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/s4s-payment/paymentConfig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentConfigGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentConf>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentConf) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentConf)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>string</returns>
        public string PaymentConfigPut (PaymentConf a = null)
        {
             ApiResponse<string> localVarResponse = PaymentConfigPutWithHttpInfo(a);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PaymentConfigPutWithHttpInfo (PaymentConf a = null)
        {

            var localVarPath = "/s4s-payment/paymentConfig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (a != null && a.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(a); // http body (model) parameter
            }
            else
            {
                localVarPostBody = a; // byte array
            }

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentConfigPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PaymentConfigPutAsync (PaymentConf a = null)
        {
             ApiResponse<string> localVarResponse = await PaymentConfigPutAsyncWithHttpInfo(a);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PaymentConfigPutAsyncWithHttpInfo (PaymentConf a = null)
        {

            var localVarPath = "/s4s-payment/paymentConfig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (a != null && a.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(a); // http body (model) parameter
            }
            else
            {
                localVarPostBody = a; // byte array
            }

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentConfigPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns></returns>
        public void PaymentGetAll (int? page, int? numberPerPage)
        {
             PaymentGetAllWithHttpInfo(page, numberPerPage);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PaymentGetAllWithHttpInfo (int? page, int? numberPerPage)
        {
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling SsPaymentApi->PaymentGetAll");
            // verify the required parameter 'numberPerPage' is set
            if (numberPerPage == null)
                throw new ApiException(400, "Missing required parameter 'numberPerPage' when calling SsPaymentApi->PaymentGetAll");

            var localVarPath = "/s4s-payment/payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (numberPerPage != null) localVarQueryParams.Add("number-per-page", Configuration.ApiClient.ParameterToString(numberPerPage)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentGetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PaymentGetAllAsync (int? page, int? numberPerPage)
        {
             await PaymentGetAllAsyncWithHttpInfo(page, numberPerPage);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PaymentGetAllAsyncWithHttpInfo (int? page, int? numberPerPage)
        {
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling SsPaymentApi->PaymentGetAll");
            // verify the required parameter 'numberPerPage' is set
            if (numberPerPage == null)
                throw new ApiException(400, "Missing required parameter 'numberPerPage' when calling SsPaymentApi->PaymentGetAll");

            var localVarPath = "/s4s-payment/payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (numberPerPage != null) localVarQueryParams.Add("number-per-page", Configuration.ApiClient.ParameterToString(numberPerPage)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentGetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
