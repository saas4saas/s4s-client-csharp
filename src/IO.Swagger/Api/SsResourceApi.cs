/* 
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISsResourceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <returns>long?</returns>
        long? CustomerResourceGet (string customerId, string resourceid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <returns>ApiResponse of long?</returns>
        ApiResponse<long?> CustomerResourceGetWithHttpInfo (string customerId, string resourceid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <returns>long?</returns>
        long? CustomerResourceLimitGet (string customerId, string resourceid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <returns>ApiResponse of long?</returns>
        ApiResponse<long?> CustomerResourceLimitGetWithHttpInfo (string customerId, string resourceid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a resource of a customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <param name="value">The Operation and value to update the resource (optional)</param>
        /// <returns>ResourcePatchResult</returns>
        ResourcePatchResult CustomerResourcePatch (string customerId, string resourceid, ResourcePatch value = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a resource of a customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <param name="value">The Operation and value to update the resource (optional)</param>
        /// <returns>ApiResponse of ResourcePatchResult</returns>
        ApiResponse<ResourcePatchResult> CustomerResourcePatchWithHttpInfo (string customerId, string resourceid, ResourcePatch value = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <param name="customerProductId"></param>
        /// <returns>long?</returns>
        long? CustomerResourceProductGet (string customerId, string resourceid, string customerProductId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <param name="customerProductId"></param>
        /// <returns>ApiResponse of long?</returns>
        ApiResponse<long?> CustomerResourceProductGetWithHttpInfo (string customerId, string resourceid, string customerProductId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <param name="customerProductId"></param>
        /// <returns>long?</returns>
        long? CustomerResourceProductLimitGet (string customerId, string resourceid, string customerProductId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <param name="customerProductId"></param>
        /// <returns>ApiResponse of long?</returns>
        ApiResponse<long?> CustomerResourceProductLimitGetWithHttpInfo (string customerId, string resourceid, string customerProductId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <returns>Task of long?</returns>
        System.Threading.Tasks.Task<long?> CustomerResourceGetAsync (string customerId, string resourceid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <returns>Task of ApiResponse (long?)</returns>
        System.Threading.Tasks.Task<ApiResponse<long?>> CustomerResourceGetAsyncWithHttpInfo (string customerId, string resourceid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <returns>Task of long?</returns>
        System.Threading.Tasks.Task<long?> CustomerResourceLimitGetAsync (string customerId, string resourceid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <returns>Task of ApiResponse (long?)</returns>
        System.Threading.Tasks.Task<ApiResponse<long?>> CustomerResourceLimitGetAsyncWithHttpInfo (string customerId, string resourceid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a resource of a customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <param name="value">The Operation and value to update the resource (optional)</param>
        /// <returns>Task of ResourcePatchResult</returns>
        System.Threading.Tasks.Task<ResourcePatchResult> CustomerResourcePatchAsync (string customerId, string resourceid, ResourcePatch value = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a resource of a customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <param name="value">The Operation and value to update the resource (optional)</param>
        /// <returns>Task of ApiResponse (ResourcePatchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourcePatchResult>> CustomerResourcePatchAsyncWithHttpInfo (string customerId, string resourceid, ResourcePatch value = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <param name="customerProductId"></param>
        /// <returns>Task of long?</returns>
        System.Threading.Tasks.Task<long?> CustomerResourceProductGetAsync (string customerId, string resourceid, string customerProductId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <param name="customerProductId"></param>
        /// <returns>Task of ApiResponse (long?)</returns>
        System.Threading.Tasks.Task<ApiResponse<long?>> CustomerResourceProductGetAsyncWithHttpInfo (string customerId, string resourceid, string customerProductId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <param name="customerProductId"></param>
        /// <returns>Task of long?</returns>
        System.Threading.Tasks.Task<long?> CustomerResourceProductLimitGetAsync (string customerId, string resourceid, string customerProductId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <param name="customerProductId"></param>
        /// <returns>Task of ApiResponse (long?)</returns>
        System.Threading.Tasks.Task<ApiResponse<long?>> CustomerResourceProductLimitGetAsyncWithHttpInfo (string customerId, string resourceid, string customerProductId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SsResourceApi : ISsResourceApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SsResourceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SsResourceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SsResourceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SsResourceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <returns>long?</returns>
        public long? CustomerResourceGet (string customerId, string resourceid)
        {
             ApiResponse<long?> localVarResponse = CustomerResourceGetWithHttpInfo(customerId, resourceid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <returns>ApiResponse of long?</returns>
        public ApiResponse< long? > CustomerResourceGetWithHttpInfo (string customerId, string resourceid)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsResourceApi->CustomerResourceGet");
            // verify the required parameter 'resourceid' is set
            if (resourceid == null)
                throw new ApiException(400, "Missing required parameter 'resourceid' when calling SsResourceApi->CustomerResourceGet");

            var localVarPath = "/s4s-resource/customer/{customer-id}/resource/{resourceid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (resourceid != null) localVarPathParams.Add("resourceid", Configuration.ApiClient.ParameterToString(resourceid)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerResourceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <returns>Task of long?</returns>
        public async System.Threading.Tasks.Task<long?> CustomerResourceGetAsync (string customerId, string resourceid)
        {
             ApiResponse<long?> localVarResponse = await CustomerResourceGetAsyncWithHttpInfo(customerId, resourceid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <returns>Task of ApiResponse (long?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<long?>> CustomerResourceGetAsyncWithHttpInfo (string customerId, string resourceid)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsResourceApi->CustomerResourceGet");
            // verify the required parameter 'resourceid' is set
            if (resourceid == null)
                throw new ApiException(400, "Missing required parameter 'resourceid' when calling SsResourceApi->CustomerResourceGet");

            var localVarPath = "/s4s-resource/customer/{customer-id}/resource/{resourceid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (resourceid != null) localVarPathParams.Add("resourceid", Configuration.ApiClient.ParameterToString(resourceid)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerResourceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <returns>long?</returns>
        public long? CustomerResourceLimitGet (string customerId, string resourceid)
        {
             ApiResponse<long?> localVarResponse = CustomerResourceLimitGetWithHttpInfo(customerId, resourceid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <returns>ApiResponse of long?</returns>
        public ApiResponse< long? > CustomerResourceLimitGetWithHttpInfo (string customerId, string resourceid)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsResourceApi->CustomerResourceLimitGet");
            // verify the required parameter 'resourceid' is set
            if (resourceid == null)
                throw new ApiException(400, "Missing required parameter 'resourceid' when calling SsResourceApi->CustomerResourceLimitGet");

            var localVarPath = "/s4s-resource/customer/{customer-id}/resource/{resourceid}/limit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (resourceid != null) localVarPathParams.Add("resourceid", Configuration.ApiClient.ParameterToString(resourceid)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerResourceLimitGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <returns>Task of long?</returns>
        public async System.Threading.Tasks.Task<long?> CustomerResourceLimitGetAsync (string customerId, string resourceid)
        {
             ApiResponse<long?> localVarResponse = await CustomerResourceLimitGetAsyncWithHttpInfo(customerId, resourceid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <returns>Task of ApiResponse (long?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<long?>> CustomerResourceLimitGetAsyncWithHttpInfo (string customerId, string resourceid)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsResourceApi->CustomerResourceLimitGet");
            // verify the required parameter 'resourceid' is set
            if (resourceid == null)
                throw new ApiException(400, "Missing required parameter 'resourceid' when calling SsResourceApi->CustomerResourceLimitGet");

            var localVarPath = "/s4s-resource/customer/{customer-id}/resource/{resourceid}/limit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (resourceid != null) localVarPathParams.Add("resourceid", Configuration.ApiClient.ParameterToString(resourceid)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerResourceLimitGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
            
        }

        /// <summary>
        ///  Updates a resource of a customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <param name="value">The Operation and value to update the resource (optional)</param>
        /// <returns>ResourcePatchResult</returns>
        public ResourcePatchResult CustomerResourcePatch (string customerId, string resourceid, ResourcePatch value = null)
        {
             ApiResponse<ResourcePatchResult> localVarResponse = CustomerResourcePatchWithHttpInfo(customerId, resourceid, value);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates a resource of a customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <param name="value">The Operation and value to update the resource (optional)</param>
        /// <returns>ApiResponse of ResourcePatchResult</returns>
        public ApiResponse< ResourcePatchResult > CustomerResourcePatchWithHttpInfo (string customerId, string resourceid, ResourcePatch value = null)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsResourceApi->CustomerResourcePatch");
            // verify the required parameter 'resourceid' is set
            if (resourceid == null)
                throw new ApiException(400, "Missing required parameter 'resourceid' when calling SsResourceApi->CustomerResourcePatch");

            var localVarPath = "/s4s-resource/customer/{customer-id}/resource/{resourceid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (resourceid != null) localVarPathParams.Add("resourceid", Configuration.ApiClient.ParameterToString(resourceid)); // path parameter
            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerResourcePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourcePatchResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourcePatchResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourcePatchResult)));
            
        }

        /// <summary>
        ///  Updates a resource of a customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <param name="value">The Operation and value to update the resource (optional)</param>
        /// <returns>Task of ResourcePatchResult</returns>
        public async System.Threading.Tasks.Task<ResourcePatchResult> CustomerResourcePatchAsync (string customerId, string resourceid, ResourcePatch value = null)
        {
             ApiResponse<ResourcePatchResult> localVarResponse = await CustomerResourcePatchAsyncWithHttpInfo(customerId, resourceid, value);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates a resource of a customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <param name="value">The Operation and value to update the resource (optional)</param>
        /// <returns>Task of ApiResponse (ResourcePatchResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourcePatchResult>> CustomerResourcePatchAsyncWithHttpInfo (string customerId, string resourceid, ResourcePatch value = null)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsResourceApi->CustomerResourcePatch");
            // verify the required parameter 'resourceid' is set
            if (resourceid == null)
                throw new ApiException(400, "Missing required parameter 'resourceid' when calling SsResourceApi->CustomerResourcePatch");

            var localVarPath = "/s4s-resource/customer/{customer-id}/resource/{resourceid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (resourceid != null) localVarPathParams.Add("resourceid", Configuration.ApiClient.ParameterToString(resourceid)); // path parameter
            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerResourcePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourcePatchResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourcePatchResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourcePatchResult)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <param name="customerProductId"></param>
        /// <returns>long?</returns>
        public long? CustomerResourceProductGet (string customerId, string resourceid, string customerProductId)
        {
             ApiResponse<long?> localVarResponse = CustomerResourceProductGetWithHttpInfo(customerId, resourceid, customerProductId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <param name="customerProductId"></param>
        /// <returns>ApiResponse of long?</returns>
        public ApiResponse< long? > CustomerResourceProductGetWithHttpInfo (string customerId, string resourceid, string customerProductId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsResourceApi->CustomerResourceProductGet");
            // verify the required parameter 'resourceid' is set
            if (resourceid == null)
                throw new ApiException(400, "Missing required parameter 'resourceid' when calling SsResourceApi->CustomerResourceProductGet");
            // verify the required parameter 'customerProductId' is set
            if (customerProductId == null)
                throw new ApiException(400, "Missing required parameter 'customerProductId' when calling SsResourceApi->CustomerResourceProductGet");

            var localVarPath = "/s4s-resource/customer/{customer-id}/resource/{resourceid}/product/{customer-product-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (resourceid != null) localVarPathParams.Add("resourceid", Configuration.ApiClient.ParameterToString(resourceid)); // path parameter
            if (customerProductId != null) localVarPathParams.Add("customer-product-id", Configuration.ApiClient.ParameterToString(customerProductId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerResourceProductGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <param name="customerProductId"></param>
        /// <returns>Task of long?</returns>
        public async System.Threading.Tasks.Task<long?> CustomerResourceProductGetAsync (string customerId, string resourceid, string customerProductId)
        {
             ApiResponse<long?> localVarResponse = await CustomerResourceProductGetAsyncWithHttpInfo(customerId, resourceid, customerProductId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <param name="customerProductId"></param>
        /// <returns>Task of ApiResponse (long?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<long?>> CustomerResourceProductGetAsyncWithHttpInfo (string customerId, string resourceid, string customerProductId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsResourceApi->CustomerResourceProductGet");
            // verify the required parameter 'resourceid' is set
            if (resourceid == null)
                throw new ApiException(400, "Missing required parameter 'resourceid' when calling SsResourceApi->CustomerResourceProductGet");
            // verify the required parameter 'customerProductId' is set
            if (customerProductId == null)
                throw new ApiException(400, "Missing required parameter 'customerProductId' when calling SsResourceApi->CustomerResourceProductGet");

            var localVarPath = "/s4s-resource/customer/{customer-id}/resource/{resourceid}/product/{customer-product-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (resourceid != null) localVarPathParams.Add("resourceid", Configuration.ApiClient.ParameterToString(resourceid)); // path parameter
            if (customerProductId != null) localVarPathParams.Add("customer-product-id", Configuration.ApiClient.ParameterToString(customerProductId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerResourceProductGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <param name="customerProductId"></param>
        /// <returns>long?</returns>
        public long? CustomerResourceProductLimitGet (string customerId, string resourceid, string customerProductId)
        {
             ApiResponse<long?> localVarResponse = CustomerResourceProductLimitGetWithHttpInfo(customerId, resourceid, customerProductId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <param name="customerProductId"></param>
        /// <returns>ApiResponse of long?</returns>
        public ApiResponse< long? > CustomerResourceProductLimitGetWithHttpInfo (string customerId, string resourceid, string customerProductId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsResourceApi->CustomerResourceProductLimitGet");
            // verify the required parameter 'resourceid' is set
            if (resourceid == null)
                throw new ApiException(400, "Missing required parameter 'resourceid' when calling SsResourceApi->CustomerResourceProductLimitGet");
            // verify the required parameter 'customerProductId' is set
            if (customerProductId == null)
                throw new ApiException(400, "Missing required parameter 'customerProductId' when calling SsResourceApi->CustomerResourceProductLimitGet");

            var localVarPath = "/s4s-resource/customer/{customer-id}/resource/{resourceid}/product/{customer-product-id}/limit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (resourceid != null) localVarPathParams.Add("resourceid", Configuration.ApiClient.ParameterToString(resourceid)); // path parameter
            if (customerProductId != null) localVarPathParams.Add("customer-product-id", Configuration.ApiClient.ParameterToString(customerProductId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerResourceProductLimitGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <param name="customerProductId"></param>
        /// <returns>Task of long?</returns>
        public async System.Threading.Tasks.Task<long?> CustomerResourceProductLimitGetAsync (string customerId, string resourceid, string customerProductId)
        {
             ApiResponse<long?> localVarResponse = await CustomerResourceProductLimitGetAsyncWithHttpInfo(customerId, resourceid, customerProductId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="resourceid"></param>
        /// <param name="customerProductId"></param>
        /// <returns>Task of ApiResponse (long?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<long?>> CustomerResourceProductLimitGetAsyncWithHttpInfo (string customerId, string resourceid, string customerProductId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsResourceApi->CustomerResourceProductLimitGet");
            // verify the required parameter 'resourceid' is set
            if (resourceid == null)
                throw new ApiException(400, "Missing required parameter 'resourceid' when calling SsResourceApi->CustomerResourceProductLimitGet");
            // verify the required parameter 'customerProductId' is set
            if (customerProductId == null)
                throw new ApiException(400, "Missing required parameter 'customerProductId' when calling SsResourceApi->CustomerResourceProductLimitGet");

            var localVarPath = "/s4s-resource/customer/{customer-id}/resource/{resourceid}/product/{customer-product-id}/limit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (resourceid != null) localVarPathParams.Add("resourceid", Configuration.ApiClient.ParameterToString(resourceid)); // path parameter
            if (customerProductId != null) localVarPathParams.Add("customer-product-id", Configuration.ApiClient.ParameterToString(customerProductId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerResourceProductLimitGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
            
        }

    }
}
