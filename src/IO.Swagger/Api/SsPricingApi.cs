/* 
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISsPricingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerBillId"></param>
        /// <returns>CustomerBill</returns>
        CustomerBill CustomerBillClose (string customerId, string customerBillId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerBillId"></param>
        /// <returns>ApiResponse of CustomerBill</returns>
        ApiResponse<CustomerBill> CustomerBillCloseWithHttpInfo (string customerId, string customerBillId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerBillId"></param>
        /// <returns>CustomerBill</returns>
        CustomerBill CustomerBillGet (string customerId, string customerBillId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerBillId"></param>
        /// <returns>ApiResponse of CustomerBill</returns>
        ApiResponse<CustomerBill> CustomerBillGetWithHttpInfo (string customerId, string customerBillId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="billId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>CustomerBill</returns>
        CustomerBill CustomerBillInitGet (string customerId, string billId, string customerPlanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="billId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>ApiResponse of CustomerBill</returns>
        ApiResponse<CustomerBill> CustomerBillInitGetWithHttpInfo (string customerId, string billId, string customerPlanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="billId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>CustomerBill</returns>
        CustomerBill CustomerBillInitPost (string customerId, string billId, string customerPlanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="billId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>ApiResponse of CustomerBill</returns>
        ApiResponse<CustomerBill> CustomerBillInitPostWithHttpInfo (string customerId, string billId, string customerPlanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>CustomerBill</returns>
        CustomerBill CustomerBillOrGet (string customerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>ApiResponse of CustomerBill</returns>
        ApiResponse<CustomerBill> CustomerBillOrGetWithHttpInfo (string customerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns></returns>
        void CustomerBillValues (string customerId, int? page, int? numberPerPage);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomerBillValuesWithHttpInfo (string customerId, int? page, int? numberPerPage);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns></returns>
        void CustomerHistoryPlanValues (string customerId, int? page, int? numberPerPage);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomerHistoryPlanValuesWithHttpInfo (string customerId, int? page, int? numberPerPage);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new Product to a Customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlan"> (optional)</param>
        /// <returns>CustomerPlan</returns>
        CustomerPlan CustomerPlanAdd (string customerId, CustomerPlan customerPlan = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new Product to a Customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlan"> (optional)</param>
        /// <returns>ApiResponse of CustomerPlan</returns>
        ApiResponse<CustomerPlan> CustomerPlanAddWithHttpInfo (string customerId, CustomerPlan customerPlan = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlan"> (optional)</param>
        /// <returns>CustomerPlan</returns>
        CustomerPlan CustomerPlanAddCheck (string customerId, CustomerPlan customerPlan = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlan"> (optional)</param>
        /// <returns>ApiResponse of CustomerPlan</returns>
        ApiResponse<CustomerPlan> CustomerPlanAddCheckWithHttpInfo (string customerId, CustomerPlan customerPlan = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>string</returns>
        string CustomerPlanClose (string customerId, string customerPlanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CustomerPlanCloseWithHttpInfo (string customerId, string customerPlanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="family"></param>
        /// <returns>CustomerPlan</returns>
        CustomerPlan CustomerPlanFamily (string customerId, string family);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="family"></param>
        /// <returns>ApiResponse of CustomerPlan</returns>
        ApiResponse<CustomerPlan> CustomerPlanFamilyWithHttpInfo (string customerId, string family);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a certain 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>CustomerPlan</returns>
        CustomerPlan CustomerPlanGet (string customerId, string customerPlanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a certain 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>ApiResponse of CustomerPlan</returns>
        ApiResponse<CustomerPlan> CustomerPlanGetWithHttpInfo (string customerId, string customerPlanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all Products Customers
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> CustomerPlanGetAll (string customerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all Products Customers
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> CustomerPlanGetAllWithHttpInfo (string customerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlanId"></param>
        /// <param name="customerBillId"></param>
        /// <param name="whenPay"></param>
        /// <returns>string</returns>
        string CustomerPlanPay (string customerId, string customerPlanId, string customerBillId, string whenPay);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlanId"></param>
        /// <param name="customerBillId"></param>
        /// <param name="whenPay"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CustomerPlanPayWithHttpInfo (string customerId, string customerPlanId, string customerBillId, string whenPay);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all the actual customerPlanId for the planId
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="planId"></param>
        /// <returns>Plan</returns>
        Plan CustomerPlanPlan (string customerId, string planId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all the actual customerPlanId for the planId
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="planId"></param>
        /// <returns>ApiResponse of Plan</returns>
        ApiResponse<Plan> CustomerPlanPlanWithHttpInfo (string customerId, string planId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns></returns>
        void CustomerPlanValues (string customerId, int? page, int? numberPerPage);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomerPlanValuesWithHttpInfo (string customerId, int? page, int? numberPerPage);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the actual pricing configuration, usefull for dynamic create a pricing table
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="onlyPanId"></param>
        /// <returns>PricingTableFull</returns>
        PricingTableFull Pricing (string currency, string onlyPanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the actual pricing configuration, usefull for dynamic create a pricing table
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="onlyPanId"></param>
        /// <returns>ApiResponse of PricingTableFull</returns>
        ApiResponse<PricingTableFull> PricingWithHttpInfo (string currency, string onlyPanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="onlyPanId"></param>
        /// <returns>PricingTable2Full</returns>
        PricingTable2Full Pricing2 (string currency, string onlyPanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="onlyPanId"></param>
        /// <returns>ApiResponse of PricingTable2Full</returns>
        ApiResponse<PricingTable2Full> Pricing2WithHttpInfo (string currency, string onlyPanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PricingConf</returns>
        PricingConf PricingConfigGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PricingConf</returns>
        ApiResponse<PricingConf> PricingConfigGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>string</returns>
        string PricingConfigPut (PricingConf a = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PricingConfigPutWithHttpInfo (PricingConf a = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PricingUiConf</returns>
        PricingUiConf PricingUiConf ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PricingUiConf</returns>
        ApiResponse<PricingUiConf> PricingUiConfWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PricingUiConf</returns>
        PricingUiConf PricingUiConfigGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PricingUiConf</returns>
        ApiResponse<PricingUiConf> PricingUiConfigGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>string</returns>
        string PricingUiConfigPut (PricingUiConf a = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PricingUiConfigPutWithHttpInfo (PricingUiConf a = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerBillId"></param>
        /// <returns>Task of CustomerBill</returns>
        System.Threading.Tasks.Task<CustomerBill> CustomerBillCloseAsync (string customerId, string customerBillId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerBillId"></param>
        /// <returns>Task of ApiResponse (CustomerBill)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerBill>> CustomerBillCloseAsyncWithHttpInfo (string customerId, string customerBillId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerBillId"></param>
        /// <returns>Task of CustomerBill</returns>
        System.Threading.Tasks.Task<CustomerBill> CustomerBillGetAsync (string customerId, string customerBillId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerBillId"></param>
        /// <returns>Task of ApiResponse (CustomerBill)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerBill>> CustomerBillGetAsyncWithHttpInfo (string customerId, string customerBillId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="billId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>Task of CustomerBill</returns>
        System.Threading.Tasks.Task<CustomerBill> CustomerBillInitGetAsync (string customerId, string billId, string customerPlanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="billId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>Task of ApiResponse (CustomerBill)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerBill>> CustomerBillInitGetAsyncWithHttpInfo (string customerId, string billId, string customerPlanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="billId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>Task of CustomerBill</returns>
        System.Threading.Tasks.Task<CustomerBill> CustomerBillInitPostAsync (string customerId, string billId, string customerPlanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="billId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>Task of ApiResponse (CustomerBill)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerBill>> CustomerBillInitPostAsyncWithHttpInfo (string customerId, string billId, string customerPlanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of CustomerBill</returns>
        System.Threading.Tasks.Task<CustomerBill> CustomerBillOrGetAsync (string customerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of ApiResponse (CustomerBill)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerBill>> CustomerBillOrGetAsyncWithHttpInfo (string customerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomerBillValuesAsync (string customerId, int? page, int? numberPerPage);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomerBillValuesAsyncWithHttpInfo (string customerId, int? page, int? numberPerPage);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomerHistoryPlanValuesAsync (string customerId, int? page, int? numberPerPage);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomerHistoryPlanValuesAsyncWithHttpInfo (string customerId, int? page, int? numberPerPage);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new Product to a Customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlan"> (optional)</param>
        /// <returns>Task of CustomerPlan</returns>
        System.Threading.Tasks.Task<CustomerPlan> CustomerPlanAddAsync (string customerId, CustomerPlan customerPlan = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new Product to a Customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlan"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomerPlan)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerPlan>> CustomerPlanAddAsyncWithHttpInfo (string customerId, CustomerPlan customerPlan = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlan"> (optional)</param>
        /// <returns>Task of CustomerPlan</returns>
        System.Threading.Tasks.Task<CustomerPlan> CustomerPlanAddCheckAsync (string customerId, CustomerPlan customerPlan = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlan"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomerPlan)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerPlan>> CustomerPlanAddCheckAsyncWithHttpInfo (string customerId, CustomerPlan customerPlan = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CustomerPlanCloseAsync (string customerId, string customerPlanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CustomerPlanCloseAsyncWithHttpInfo (string customerId, string customerPlanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="family"></param>
        /// <returns>Task of CustomerPlan</returns>
        System.Threading.Tasks.Task<CustomerPlan> CustomerPlanFamilyAsync (string customerId, string family);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="family"></param>
        /// <returns>Task of ApiResponse (CustomerPlan)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerPlan>> CustomerPlanFamilyAsyncWithHttpInfo (string customerId, string family);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a certain 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>Task of CustomerPlan</returns>
        System.Threading.Tasks.Task<CustomerPlan> CustomerPlanGetAsync (string customerId, string customerPlanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a certain 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>Task of ApiResponse (CustomerPlan)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerPlan>> CustomerPlanGetAsyncWithHttpInfo (string customerId, string customerPlanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all Products Customers
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> CustomerPlanGetAllAsync (string customerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all Products Customers
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> CustomerPlanGetAllAsyncWithHttpInfo (string customerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlanId"></param>
        /// <param name="customerBillId"></param>
        /// <param name="whenPay"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CustomerPlanPayAsync (string customerId, string customerPlanId, string customerBillId, string whenPay);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlanId"></param>
        /// <param name="customerBillId"></param>
        /// <param name="whenPay"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CustomerPlanPayAsyncWithHttpInfo (string customerId, string customerPlanId, string customerBillId, string whenPay);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all the actual customerPlanId for the planId
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="planId"></param>
        /// <returns>Task of Plan</returns>
        System.Threading.Tasks.Task<Plan> CustomerPlanPlanAsync (string customerId, string planId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all the actual customerPlanId for the planId
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="planId"></param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        System.Threading.Tasks.Task<ApiResponse<Plan>> CustomerPlanPlanAsyncWithHttpInfo (string customerId, string planId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomerPlanValuesAsync (string customerId, int? page, int? numberPerPage);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomerPlanValuesAsyncWithHttpInfo (string customerId, int? page, int? numberPerPage);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the actual pricing configuration, usefull for dynamic create a pricing table
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="onlyPanId"></param>
        /// <returns>Task of PricingTableFull</returns>
        System.Threading.Tasks.Task<PricingTableFull> PricingAsync (string currency, string onlyPanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the actual pricing configuration, usefull for dynamic create a pricing table
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="onlyPanId"></param>
        /// <returns>Task of ApiResponse (PricingTableFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricingTableFull>> PricingAsyncWithHttpInfo (string currency, string onlyPanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="onlyPanId"></param>
        /// <returns>Task of PricingTable2Full</returns>
        System.Threading.Tasks.Task<PricingTable2Full> Pricing2Async (string currency, string onlyPanId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="onlyPanId"></param>
        /// <returns>Task of ApiResponse (PricingTable2Full)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricingTable2Full>> Pricing2AsyncWithHttpInfo (string currency, string onlyPanId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PricingConf</returns>
        System.Threading.Tasks.Task<PricingConf> PricingConfigGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PricingConf)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricingConf>> PricingConfigGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PricingConfigPutAsync (PricingConf a = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PricingConfigPutAsyncWithHttpInfo (PricingConf a = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PricingUiConf</returns>
        System.Threading.Tasks.Task<PricingUiConf> PricingUiConfAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PricingUiConf)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricingUiConf>> PricingUiConfAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PricingUiConf</returns>
        System.Threading.Tasks.Task<PricingUiConf> PricingUiConfigGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PricingUiConf)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricingUiConf>> PricingUiConfigGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PricingUiConfigPutAsync (PricingUiConf a = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PricingUiConfigPutAsyncWithHttpInfo (PricingUiConf a = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SsPricingApi : ISsPricingApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SsPricingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SsPricingApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SsPricingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SsPricingApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerBillId"></param>
        /// <returns>CustomerBill</returns>
        public CustomerBill CustomerBillClose (string customerId, string customerBillId)
        {
             ApiResponse<CustomerBill> localVarResponse = CustomerBillCloseWithHttpInfo(customerId, customerBillId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerBillId"></param>
        /// <returns>ApiResponse of CustomerBill</returns>
        public ApiResponse< CustomerBill > CustomerBillCloseWithHttpInfo (string customerId, string customerBillId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerBillClose");
            // verify the required parameter 'customerBillId' is set
            if (customerBillId == null)
                throw new ApiException(400, "Missing required parameter 'customerBillId' when calling SsPricingApi->CustomerBillClose");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/bill/{customer-bill-id}/close";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (customerBillId != null) localVarPathParams.Add("customer-bill-id", Configuration.ApiClient.ParameterToString(customerBillId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerBillClose", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerBill>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerBill) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerBill)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerBillId"></param>
        /// <returns>Task of CustomerBill</returns>
        public async System.Threading.Tasks.Task<CustomerBill> CustomerBillCloseAsync (string customerId, string customerBillId)
        {
             ApiResponse<CustomerBill> localVarResponse = await CustomerBillCloseAsyncWithHttpInfo(customerId, customerBillId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerBillId"></param>
        /// <returns>Task of ApiResponse (CustomerBill)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerBill>> CustomerBillCloseAsyncWithHttpInfo (string customerId, string customerBillId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerBillClose");
            // verify the required parameter 'customerBillId' is set
            if (customerBillId == null)
                throw new ApiException(400, "Missing required parameter 'customerBillId' when calling SsPricingApi->CustomerBillClose");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/bill/{customer-bill-id}/close";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (customerBillId != null) localVarPathParams.Add("customer-bill-id", Configuration.ApiClient.ParameterToString(customerBillId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerBillClose", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerBill>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerBill) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerBill)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerBillId"></param>
        /// <returns>CustomerBill</returns>
        public CustomerBill CustomerBillGet (string customerId, string customerBillId)
        {
             ApiResponse<CustomerBill> localVarResponse = CustomerBillGetWithHttpInfo(customerId, customerBillId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerBillId"></param>
        /// <returns>ApiResponse of CustomerBill</returns>
        public ApiResponse< CustomerBill > CustomerBillGetWithHttpInfo (string customerId, string customerBillId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerBillGet");
            // verify the required parameter 'customerBillId' is set
            if (customerBillId == null)
                throw new ApiException(400, "Missing required parameter 'customerBillId' when calling SsPricingApi->CustomerBillGet");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/bill/{customer-bill-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (customerBillId != null) localVarPathParams.Add("customer-bill-id", Configuration.ApiClient.ParameterToString(customerBillId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerBillGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerBill>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerBill) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerBill)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerBillId"></param>
        /// <returns>Task of CustomerBill</returns>
        public async System.Threading.Tasks.Task<CustomerBill> CustomerBillGetAsync (string customerId, string customerBillId)
        {
             ApiResponse<CustomerBill> localVarResponse = await CustomerBillGetAsyncWithHttpInfo(customerId, customerBillId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerBillId"></param>
        /// <returns>Task of ApiResponse (CustomerBill)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerBill>> CustomerBillGetAsyncWithHttpInfo (string customerId, string customerBillId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerBillGet");
            // verify the required parameter 'customerBillId' is set
            if (customerBillId == null)
                throw new ApiException(400, "Missing required parameter 'customerBillId' when calling SsPricingApi->CustomerBillGet");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/bill/{customer-bill-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (customerBillId != null) localVarPathParams.Add("customer-bill-id", Configuration.ApiClient.ParameterToString(customerBillId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerBillGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerBill>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerBill) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerBill)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="billId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>CustomerBill</returns>
        public CustomerBill CustomerBillInitGet (string customerId, string billId, string customerPlanId)
        {
             ApiResponse<CustomerBill> localVarResponse = CustomerBillInitGetWithHttpInfo(customerId, billId, customerPlanId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="billId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>ApiResponse of CustomerBill</returns>
        public ApiResponse< CustomerBill > CustomerBillInitGetWithHttpInfo (string customerId, string billId, string customerPlanId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerBillInitGet");
            // verify the required parameter 'billId' is set
            if (billId == null)
                throw new ApiException(400, "Missing required parameter 'billId' when calling SsPricingApi->CustomerBillInitGet");
            // verify the required parameter 'customerPlanId' is set
            if (customerPlanId == null)
                throw new ApiException(400, "Missing required parameter 'customerPlanId' when calling SsPricingApi->CustomerBillInitGet");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/bill/init";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (billId != null) localVarQueryParams.Add("bill-id", Configuration.ApiClient.ParameterToString(billId)); // query parameter
            if (customerPlanId != null) localVarQueryParams.Add("customer-plan-id", Configuration.ApiClient.ParameterToString(customerPlanId)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerBillInitGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerBill>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerBill) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerBill)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="billId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>Task of CustomerBill</returns>
        public async System.Threading.Tasks.Task<CustomerBill> CustomerBillInitGetAsync (string customerId, string billId, string customerPlanId)
        {
             ApiResponse<CustomerBill> localVarResponse = await CustomerBillInitGetAsyncWithHttpInfo(customerId, billId, customerPlanId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="billId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>Task of ApiResponse (CustomerBill)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerBill>> CustomerBillInitGetAsyncWithHttpInfo (string customerId, string billId, string customerPlanId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerBillInitGet");
            // verify the required parameter 'billId' is set
            if (billId == null)
                throw new ApiException(400, "Missing required parameter 'billId' when calling SsPricingApi->CustomerBillInitGet");
            // verify the required parameter 'customerPlanId' is set
            if (customerPlanId == null)
                throw new ApiException(400, "Missing required parameter 'customerPlanId' when calling SsPricingApi->CustomerBillInitGet");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/bill/init";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (billId != null) localVarQueryParams.Add("bill-id", Configuration.ApiClient.ParameterToString(billId)); // query parameter
            if (customerPlanId != null) localVarQueryParams.Add("customer-plan-id", Configuration.ApiClient.ParameterToString(customerPlanId)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerBillInitGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerBill>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerBill) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerBill)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="billId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>CustomerBill</returns>
        public CustomerBill CustomerBillInitPost (string customerId, string billId, string customerPlanId)
        {
             ApiResponse<CustomerBill> localVarResponse = CustomerBillInitPostWithHttpInfo(customerId, billId, customerPlanId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="billId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>ApiResponse of CustomerBill</returns>
        public ApiResponse< CustomerBill > CustomerBillInitPostWithHttpInfo (string customerId, string billId, string customerPlanId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerBillInitPost");
            // verify the required parameter 'billId' is set
            if (billId == null)
                throw new ApiException(400, "Missing required parameter 'billId' when calling SsPricingApi->CustomerBillInitPost");
            // verify the required parameter 'customerPlanId' is set
            if (customerPlanId == null)
                throw new ApiException(400, "Missing required parameter 'customerPlanId' when calling SsPricingApi->CustomerBillInitPost");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/bill/initPost";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (billId != null) localVarQueryParams.Add("bill-id", Configuration.ApiClient.ParameterToString(billId)); // query parameter
            if (customerPlanId != null) localVarQueryParams.Add("customer-plan-id", Configuration.ApiClient.ParameterToString(customerPlanId)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerBillInitPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerBill>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerBill) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerBill)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="billId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>Task of CustomerBill</returns>
        public async System.Threading.Tasks.Task<CustomerBill> CustomerBillInitPostAsync (string customerId, string billId, string customerPlanId)
        {
             ApiResponse<CustomerBill> localVarResponse = await CustomerBillInitPostAsyncWithHttpInfo(customerId, billId, customerPlanId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="billId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>Task of ApiResponse (CustomerBill)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerBill>> CustomerBillInitPostAsyncWithHttpInfo (string customerId, string billId, string customerPlanId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerBillInitPost");
            // verify the required parameter 'billId' is set
            if (billId == null)
                throw new ApiException(400, "Missing required parameter 'billId' when calling SsPricingApi->CustomerBillInitPost");
            // verify the required parameter 'customerPlanId' is set
            if (customerPlanId == null)
                throw new ApiException(400, "Missing required parameter 'customerPlanId' when calling SsPricingApi->CustomerBillInitPost");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/bill/initPost";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (billId != null) localVarQueryParams.Add("bill-id", Configuration.ApiClient.ParameterToString(billId)); // query parameter
            if (customerPlanId != null) localVarQueryParams.Add("customer-plan-id", Configuration.ApiClient.ParameterToString(customerPlanId)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerBillInitPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerBill>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerBill) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerBill)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>CustomerBill</returns>
        public CustomerBill CustomerBillOrGet (string customerId)
        {
             ApiResponse<CustomerBill> localVarResponse = CustomerBillOrGetWithHttpInfo(customerId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>ApiResponse of CustomerBill</returns>
        public ApiResponse< CustomerBill > CustomerBillOrGetWithHttpInfo (string customerId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerBillOrGet");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/bill/or";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerBillOrGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerBill>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerBill) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerBill)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of CustomerBill</returns>
        public async System.Threading.Tasks.Task<CustomerBill> CustomerBillOrGetAsync (string customerId)
        {
             ApiResponse<CustomerBill> localVarResponse = await CustomerBillOrGetAsyncWithHttpInfo(customerId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of ApiResponse (CustomerBill)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerBill>> CustomerBillOrGetAsyncWithHttpInfo (string customerId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerBillOrGet");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/bill/or";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerBillOrGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerBill>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerBill) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerBill)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns></returns>
        public void CustomerBillValues (string customerId, int? page, int? numberPerPage)
        {
             CustomerBillValuesWithHttpInfo(customerId, page, numberPerPage);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomerBillValuesWithHttpInfo (string customerId, int? page, int? numberPerPage)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerBillValues");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling SsPricingApi->CustomerBillValues");
            // verify the required parameter 'numberPerPage' is set
            if (numberPerPage == null)
                throw new ApiException(400, "Missing required parameter 'numberPerPage' when calling SsPricingApi->CustomerBillValues");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/bill/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (numberPerPage != null) localVarQueryParams.Add("number-per-page", Configuration.ApiClient.ParameterToString(numberPerPage)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerBillValues", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomerBillValuesAsync (string customerId, int? page, int? numberPerPage)
        {
             await CustomerBillValuesAsyncWithHttpInfo(customerId, page, numberPerPage);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomerBillValuesAsyncWithHttpInfo (string customerId, int? page, int? numberPerPage)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerBillValues");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling SsPricingApi->CustomerBillValues");
            // verify the required parameter 'numberPerPage' is set
            if (numberPerPage == null)
                throw new ApiException(400, "Missing required parameter 'numberPerPage' when calling SsPricingApi->CustomerBillValues");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/bill/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (numberPerPage != null) localVarQueryParams.Add("number-per-page", Configuration.ApiClient.ParameterToString(numberPerPage)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerBillValues", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns></returns>
        public void CustomerHistoryPlanValues (string customerId, int? page, int? numberPerPage)
        {
             CustomerHistoryPlanValuesWithHttpInfo(customerId, page, numberPerPage);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomerHistoryPlanValuesWithHttpInfo (string customerId, int? page, int? numberPerPage)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerHistoryPlanValues");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling SsPricingApi->CustomerHistoryPlanValues");
            // verify the required parameter 'numberPerPage' is set
            if (numberPerPage == null)
                throw new ApiException(400, "Missing required parameter 'numberPerPage' when calling SsPricingApi->CustomerHistoryPlanValues");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/history/plan/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (numberPerPage != null) localVarQueryParams.Add("number-per-page", Configuration.ApiClient.ParameterToString(numberPerPage)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerHistoryPlanValues", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomerHistoryPlanValuesAsync (string customerId, int? page, int? numberPerPage)
        {
             await CustomerHistoryPlanValuesAsyncWithHttpInfo(customerId, page, numberPerPage);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomerHistoryPlanValuesAsyncWithHttpInfo (string customerId, int? page, int? numberPerPage)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerHistoryPlanValues");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling SsPricingApi->CustomerHistoryPlanValues");
            // verify the required parameter 'numberPerPage' is set
            if (numberPerPage == null)
                throw new ApiException(400, "Missing required parameter 'numberPerPage' when calling SsPricingApi->CustomerHistoryPlanValues");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/history/plan/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (numberPerPage != null) localVarQueryParams.Add("number-per-page", Configuration.ApiClient.ParameterToString(numberPerPage)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerHistoryPlanValues", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Add a new Product to a Customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlan"> (optional)</param>
        /// <returns>CustomerPlan</returns>
        public CustomerPlan CustomerPlanAdd (string customerId, CustomerPlan customerPlan = null)
        {
             ApiResponse<CustomerPlan> localVarResponse = CustomerPlanAddWithHttpInfo(customerId, customerPlan);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a new Product to a Customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlan"> (optional)</param>
        /// <returns>ApiResponse of CustomerPlan</returns>
        public ApiResponse< CustomerPlan > CustomerPlanAddWithHttpInfo (string customerId, CustomerPlan customerPlan = null)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerPlanAdd");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (customerPlan != null && customerPlan.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(customerPlan); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customerPlan; // byte array
            }

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPlanAdd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPlan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPlan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPlan)));
            
        }

        /// <summary>
        ///  Add a new Product to a Customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlan"> (optional)</param>
        /// <returns>Task of CustomerPlan</returns>
        public async System.Threading.Tasks.Task<CustomerPlan> CustomerPlanAddAsync (string customerId, CustomerPlan customerPlan = null)
        {
             ApiResponse<CustomerPlan> localVarResponse = await CustomerPlanAddAsyncWithHttpInfo(customerId, customerPlan);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Add a new Product to a Customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlan"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomerPlan)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerPlan>> CustomerPlanAddAsyncWithHttpInfo (string customerId, CustomerPlan customerPlan = null)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerPlanAdd");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (customerPlan != null && customerPlan.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(customerPlan); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customerPlan; // byte array
            }

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPlanAdd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPlan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPlan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPlan)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlan"> (optional)</param>
        /// <returns>CustomerPlan</returns>
        public CustomerPlan CustomerPlanAddCheck (string customerId, CustomerPlan customerPlan = null)
        {
             ApiResponse<CustomerPlan> localVarResponse = CustomerPlanAddCheckWithHttpInfo(customerId, customerPlan);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlan"> (optional)</param>
        /// <returns>ApiResponse of CustomerPlan</returns>
        public ApiResponse< CustomerPlan > CustomerPlanAddCheckWithHttpInfo (string customerId, CustomerPlan customerPlan = null)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerPlanAddCheck");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/plan/addCheck";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (customerPlan != null && customerPlan.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(customerPlan); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customerPlan; // byte array
            }

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPlanAddCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPlan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPlan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPlan)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlan"> (optional)</param>
        /// <returns>Task of CustomerPlan</returns>
        public async System.Threading.Tasks.Task<CustomerPlan> CustomerPlanAddCheckAsync (string customerId, CustomerPlan customerPlan = null)
        {
             ApiResponse<CustomerPlan> localVarResponse = await CustomerPlanAddCheckAsyncWithHttpInfo(customerId, customerPlan);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlan"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomerPlan)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerPlan>> CustomerPlanAddCheckAsyncWithHttpInfo (string customerId, CustomerPlan customerPlan = null)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerPlanAddCheck");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/plan/addCheck";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (customerPlan != null && customerPlan.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(customerPlan); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customerPlan; // byte array
            }

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPlanAddCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPlan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPlan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPlan)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>string</returns>
        public string CustomerPlanClose (string customerId, string customerPlanId)
        {
             ApiResponse<string> localVarResponse = CustomerPlanCloseWithHttpInfo(customerId, customerPlanId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CustomerPlanCloseWithHttpInfo (string customerId, string customerPlanId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerPlanClose");
            // verify the required parameter 'customerPlanId' is set
            if (customerPlanId == null)
                throw new ApiException(400, "Missing required parameter 'customerPlanId' when calling SsPricingApi->CustomerPlanClose");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/plan/{customer-plan-id}/close";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (customerPlanId != null) localVarPathParams.Add("customer-plan-id", Configuration.ApiClient.ParameterToString(customerPlanId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPlanClose", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CustomerPlanCloseAsync (string customerId, string customerPlanId)
        {
             ApiResponse<string> localVarResponse = await CustomerPlanCloseAsyncWithHttpInfo(customerId, customerPlanId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CustomerPlanCloseAsyncWithHttpInfo (string customerId, string customerPlanId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerPlanClose");
            // verify the required parameter 'customerPlanId' is set
            if (customerPlanId == null)
                throw new ApiException(400, "Missing required parameter 'customerPlanId' when calling SsPricingApi->CustomerPlanClose");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/plan/{customer-plan-id}/close";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (customerPlanId != null) localVarPathParams.Add("customer-plan-id", Configuration.ApiClient.ParameterToString(customerPlanId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPlanClose", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="family"></param>
        /// <returns>CustomerPlan</returns>
        public CustomerPlan CustomerPlanFamily (string customerId, string family)
        {
             ApiResponse<CustomerPlan> localVarResponse = CustomerPlanFamilyWithHttpInfo(customerId, family);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="family"></param>
        /// <returns>ApiResponse of CustomerPlan</returns>
        public ApiResponse< CustomerPlan > CustomerPlanFamilyWithHttpInfo (string customerId, string family)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerPlanFamily");
            // verify the required parameter 'family' is set
            if (family == null)
                throw new ApiException(400, "Missing required parameter 'family' when calling SsPricingApi->CustomerPlanFamily");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/plan/family";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (family != null) localVarQueryParams.Add("family", Configuration.ApiClient.ParameterToString(family)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPlanFamily", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPlan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPlan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPlan)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="family"></param>
        /// <returns>Task of CustomerPlan</returns>
        public async System.Threading.Tasks.Task<CustomerPlan> CustomerPlanFamilyAsync (string customerId, string family)
        {
             ApiResponse<CustomerPlan> localVarResponse = await CustomerPlanFamilyAsyncWithHttpInfo(customerId, family);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="family"></param>
        /// <returns>Task of ApiResponse (CustomerPlan)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerPlan>> CustomerPlanFamilyAsyncWithHttpInfo (string customerId, string family)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerPlanFamily");
            // verify the required parameter 'family' is set
            if (family == null)
                throw new ApiException(400, "Missing required parameter 'family' when calling SsPricingApi->CustomerPlanFamily");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/plan/family";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (family != null) localVarQueryParams.Add("family", Configuration.ApiClient.ParameterToString(family)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPlanFamily", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPlan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPlan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPlan)));
            
        }

        /// <summary>
        ///  Get a certain 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>CustomerPlan</returns>
        public CustomerPlan CustomerPlanGet (string customerId, string customerPlanId)
        {
             ApiResponse<CustomerPlan> localVarResponse = CustomerPlanGetWithHttpInfo(customerId, customerPlanId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a certain 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>ApiResponse of CustomerPlan</returns>
        public ApiResponse< CustomerPlan > CustomerPlanGetWithHttpInfo (string customerId, string customerPlanId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerPlanGet");
            // verify the required parameter 'customerPlanId' is set
            if (customerPlanId == null)
                throw new ApiException(400, "Missing required parameter 'customerPlanId' when calling SsPricingApi->CustomerPlanGet");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/plan/{customer-plan-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (customerPlanId != null) localVarPathParams.Add("customer-plan-id", Configuration.ApiClient.ParameterToString(customerPlanId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPlanGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPlan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPlan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPlan)));
            
        }

        /// <summary>
        ///  Get a certain 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>Task of CustomerPlan</returns>
        public async System.Threading.Tasks.Task<CustomerPlan> CustomerPlanGetAsync (string customerId, string customerPlanId)
        {
             ApiResponse<CustomerPlan> localVarResponse = await CustomerPlanGetAsyncWithHttpInfo(customerId, customerPlanId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get a certain 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlanId"></param>
        /// <returns>Task of ApiResponse (CustomerPlan)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerPlan>> CustomerPlanGetAsyncWithHttpInfo (string customerId, string customerPlanId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerPlanGet");
            // verify the required parameter 'customerPlanId' is set
            if (customerPlanId == null)
                throw new ApiException(400, "Missing required parameter 'customerPlanId' when calling SsPricingApi->CustomerPlanGet");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/plan/{customer-plan-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (customerPlanId != null) localVarPathParams.Add("customer-plan-id", Configuration.ApiClient.ParameterToString(customerPlanId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPlanGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPlan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPlan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPlan)));
            
        }

        /// <summary>
        ///  Get all Products Customers
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> CustomerPlanGetAll (string customerId)
        {
             ApiResponse<List<string>> localVarResponse = CustomerPlanGetAllWithHttpInfo(customerId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all Products Customers
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > CustomerPlanGetAllWithHttpInfo (string customerId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerPlanGetAll");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPlanGetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        ///  Get all Products Customers
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> CustomerPlanGetAllAsync (string customerId)
        {
             ApiResponse<List<string>> localVarResponse = await CustomerPlanGetAllAsyncWithHttpInfo(customerId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get all Products Customers
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> CustomerPlanGetAllAsyncWithHttpInfo (string customerId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerPlanGetAll");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPlanGetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlanId"></param>
        /// <param name="customerBillId"></param>
        /// <param name="whenPay"></param>
        /// <returns>string</returns>
        public string CustomerPlanPay (string customerId, string customerPlanId, string customerBillId, string whenPay)
        {
             ApiResponse<string> localVarResponse = CustomerPlanPayWithHttpInfo(customerId, customerPlanId, customerBillId, whenPay);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlanId"></param>
        /// <param name="customerBillId"></param>
        /// <param name="whenPay"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CustomerPlanPayWithHttpInfo (string customerId, string customerPlanId, string customerBillId, string whenPay)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerPlanPay");
            // verify the required parameter 'customerPlanId' is set
            if (customerPlanId == null)
                throw new ApiException(400, "Missing required parameter 'customerPlanId' when calling SsPricingApi->CustomerPlanPay");
            // verify the required parameter 'customerBillId' is set
            if (customerBillId == null)
                throw new ApiException(400, "Missing required parameter 'customerBillId' when calling SsPricingApi->CustomerPlanPay");
            // verify the required parameter 'whenPay' is set
            if (whenPay == null)
                throw new ApiException(400, "Missing required parameter 'whenPay' when calling SsPricingApi->CustomerPlanPay");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/plan/pay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (customerPlanId != null) localVarQueryParams.Add("customer-plan-id", Configuration.ApiClient.ParameterToString(customerPlanId)); // query parameter
            if (customerBillId != null) localVarQueryParams.Add("customer-bill-id", Configuration.ApiClient.ParameterToString(customerBillId)); // query parameter
            if (whenPay != null) localVarQueryParams.Add("when-pay", Configuration.ApiClient.ParameterToString(whenPay)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPlanPay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlanId"></param>
        /// <param name="customerBillId"></param>
        /// <param name="whenPay"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CustomerPlanPayAsync (string customerId, string customerPlanId, string customerBillId, string whenPay)
        {
             ApiResponse<string> localVarResponse = await CustomerPlanPayAsyncWithHttpInfo(customerId, customerPlanId, customerBillId, whenPay);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="customerPlanId"></param>
        /// <param name="customerBillId"></param>
        /// <param name="whenPay"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CustomerPlanPayAsyncWithHttpInfo (string customerId, string customerPlanId, string customerBillId, string whenPay)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerPlanPay");
            // verify the required parameter 'customerPlanId' is set
            if (customerPlanId == null)
                throw new ApiException(400, "Missing required parameter 'customerPlanId' when calling SsPricingApi->CustomerPlanPay");
            // verify the required parameter 'customerBillId' is set
            if (customerBillId == null)
                throw new ApiException(400, "Missing required parameter 'customerBillId' when calling SsPricingApi->CustomerPlanPay");
            // verify the required parameter 'whenPay' is set
            if (whenPay == null)
                throw new ApiException(400, "Missing required parameter 'whenPay' when calling SsPricingApi->CustomerPlanPay");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/plan/pay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (customerPlanId != null) localVarQueryParams.Add("customer-plan-id", Configuration.ApiClient.ParameterToString(customerPlanId)); // query parameter
            if (customerBillId != null) localVarQueryParams.Add("customer-bill-id", Configuration.ApiClient.ParameterToString(customerBillId)); // query parameter
            if (whenPay != null) localVarQueryParams.Add("when-pay", Configuration.ApiClient.ParameterToString(whenPay)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPlanPay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  Get all the actual customerPlanId for the planId
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="planId"></param>
        /// <returns>Plan</returns>
        public Plan CustomerPlanPlan (string customerId, string planId)
        {
             ApiResponse<Plan> localVarResponse = CustomerPlanPlanWithHttpInfo(customerId, planId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all the actual customerPlanId for the planId
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="planId"></param>
        /// <returns>ApiResponse of Plan</returns>
        public ApiResponse< Plan > CustomerPlanPlanWithHttpInfo (string customerId, string planId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerPlanPlan");
            // verify the required parameter 'planId' is set
            if (planId == null)
                throw new ApiException(400, "Missing required parameter 'planId' when calling SsPricingApi->CustomerPlanPlan");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/plan/plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (planId != null) localVarQueryParams.Add("plan-id", Configuration.ApiClient.ParameterToString(planId)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPlanPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Plan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Plan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Plan)));
            
        }

        /// <summary>
        ///  Get all the actual customerPlanId for the planId
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="planId"></param>
        /// <returns>Task of Plan</returns>
        public async System.Threading.Tasks.Task<Plan> CustomerPlanPlanAsync (string customerId, string planId)
        {
             ApiResponse<Plan> localVarResponse = await CustomerPlanPlanAsyncWithHttpInfo(customerId, planId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get all the actual customerPlanId for the planId
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="planId"></param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Plan>> CustomerPlanPlanAsyncWithHttpInfo (string customerId, string planId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerPlanPlan");
            // verify the required parameter 'planId' is set
            if (planId == null)
                throw new ApiException(400, "Missing required parameter 'planId' when calling SsPricingApi->CustomerPlanPlan");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/plan/plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (planId != null) localVarQueryParams.Add("plan-id", Configuration.ApiClient.ParameterToString(planId)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPlanPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Plan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Plan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Plan)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns></returns>
        public void CustomerPlanValues (string customerId, int? page, int? numberPerPage)
        {
             CustomerPlanValuesWithHttpInfo(customerId, page, numberPerPage);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomerPlanValuesWithHttpInfo (string customerId, int? page, int? numberPerPage)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerPlanValues");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling SsPricingApi->CustomerPlanValues");
            // verify the required parameter 'numberPerPage' is set
            if (numberPerPage == null)
                throw new ApiException(400, "Missing required parameter 'numberPerPage' when calling SsPricingApi->CustomerPlanValues");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/plan/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (numberPerPage != null) localVarQueryParams.Add("number-per-page", Configuration.ApiClient.ParameterToString(numberPerPage)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPlanValues", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomerPlanValuesAsync (string customerId, int? page, int? numberPerPage)
        {
             await CustomerPlanValuesAsyncWithHttpInfo(customerId, page, numberPerPage);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomerPlanValuesAsyncWithHttpInfo (string customerId, int? page, int? numberPerPage)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsPricingApi->CustomerPlanValues");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling SsPricingApi->CustomerPlanValues");
            // verify the required parameter 'numberPerPage' is set
            if (numberPerPage == null)
                throw new ApiException(400, "Missing required parameter 'numberPerPage' when calling SsPricingApi->CustomerPlanValues");

            var localVarPath = "/s4s-pricing/customer/{customer-id}/plan/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (numberPerPage != null) localVarQueryParams.Add("number-per-page", Configuration.ApiClient.ParameterToString(numberPerPage)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerPlanValues", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Get the actual pricing configuration, usefull for dynamic create a pricing table
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="onlyPanId"></param>
        /// <returns>PricingTableFull</returns>
        public PricingTableFull Pricing (string currency, string onlyPanId)
        {
             ApiResponse<PricingTableFull> localVarResponse = PricingWithHttpInfo(currency, onlyPanId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the actual pricing configuration, usefull for dynamic create a pricing table
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="onlyPanId"></param>
        /// <returns>ApiResponse of PricingTableFull</returns>
        public ApiResponse< PricingTableFull > PricingWithHttpInfo (string currency, string onlyPanId)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling SsPricingApi->Pricing");
            // verify the required parameter 'onlyPanId' is set
            if (onlyPanId == null)
                throw new ApiException(400, "Missing required parameter 'onlyPanId' when calling SsPricingApi->Pricing");

            var localVarPath = "/s4s-pricing/pricing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (currency != null) localVarQueryParams.Add("currency", Configuration.ApiClient.ParameterToString(currency)); // query parameter
            if (onlyPanId != null) localVarQueryParams.Add("only-pan-id", Configuration.ApiClient.ParameterToString(onlyPanId)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Pricing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PricingTableFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PricingTableFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PricingTableFull)));
            
        }

        /// <summary>
        ///  Get the actual pricing configuration, usefull for dynamic create a pricing table
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="onlyPanId"></param>
        /// <returns>Task of PricingTableFull</returns>
        public async System.Threading.Tasks.Task<PricingTableFull> PricingAsync (string currency, string onlyPanId)
        {
             ApiResponse<PricingTableFull> localVarResponse = await PricingAsyncWithHttpInfo(currency, onlyPanId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get the actual pricing configuration, usefull for dynamic create a pricing table
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="onlyPanId"></param>
        /// <returns>Task of ApiResponse (PricingTableFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PricingTableFull>> PricingAsyncWithHttpInfo (string currency, string onlyPanId)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling SsPricingApi->Pricing");
            // verify the required parameter 'onlyPanId' is set
            if (onlyPanId == null)
                throw new ApiException(400, "Missing required parameter 'onlyPanId' when calling SsPricingApi->Pricing");

            var localVarPath = "/s4s-pricing/pricing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (currency != null) localVarQueryParams.Add("currency", Configuration.ApiClient.ParameterToString(currency)); // query parameter
            if (onlyPanId != null) localVarQueryParams.Add("only-pan-id", Configuration.ApiClient.ParameterToString(onlyPanId)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Pricing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PricingTableFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PricingTableFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PricingTableFull)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="onlyPanId"></param>
        /// <returns>PricingTable2Full</returns>
        public PricingTable2Full Pricing2 (string currency, string onlyPanId)
        {
             ApiResponse<PricingTable2Full> localVarResponse = Pricing2WithHttpInfo(currency, onlyPanId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="onlyPanId"></param>
        /// <returns>ApiResponse of PricingTable2Full</returns>
        public ApiResponse< PricingTable2Full > Pricing2WithHttpInfo (string currency, string onlyPanId)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling SsPricingApi->Pricing2");
            // verify the required parameter 'onlyPanId' is set
            if (onlyPanId == null)
                throw new ApiException(400, "Missing required parameter 'onlyPanId' when calling SsPricingApi->Pricing2");

            var localVarPath = "/s4s-pricing/pricing2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (currency != null) localVarQueryParams.Add("currency", Configuration.ApiClient.ParameterToString(currency)); // query parameter
            if (onlyPanId != null) localVarQueryParams.Add("only-pan-id", Configuration.ApiClient.ParameterToString(onlyPanId)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Pricing2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PricingTable2Full>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PricingTable2Full) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PricingTable2Full)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="onlyPanId"></param>
        /// <returns>Task of PricingTable2Full</returns>
        public async System.Threading.Tasks.Task<PricingTable2Full> Pricing2Async (string currency, string onlyPanId)
        {
             ApiResponse<PricingTable2Full> localVarResponse = await Pricing2AsyncWithHttpInfo(currency, onlyPanId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="onlyPanId"></param>
        /// <returns>Task of ApiResponse (PricingTable2Full)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PricingTable2Full>> Pricing2AsyncWithHttpInfo (string currency, string onlyPanId)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling SsPricingApi->Pricing2");
            // verify the required parameter 'onlyPanId' is set
            if (onlyPanId == null)
                throw new ApiException(400, "Missing required parameter 'onlyPanId' when calling SsPricingApi->Pricing2");

            var localVarPath = "/s4s-pricing/pricing2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (currency != null) localVarQueryParams.Add("currency", Configuration.ApiClient.ParameterToString(currency)); // query parameter
            if (onlyPanId != null) localVarQueryParams.Add("only-pan-id", Configuration.ApiClient.ParameterToString(onlyPanId)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Pricing2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PricingTable2Full>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PricingTable2Full) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PricingTable2Full)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PricingConf</returns>
        public PricingConf PricingConfigGet ()
        {
             ApiResponse<PricingConf> localVarResponse = PricingConfigGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PricingConf</returns>
        public ApiResponse< PricingConf > PricingConfigGetWithHttpInfo ()
        {

            var localVarPath = "/s4s-pricing/pricingConfig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PricingConfigGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PricingConf>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PricingConf) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PricingConf)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PricingConf</returns>
        public async System.Threading.Tasks.Task<PricingConf> PricingConfigGetAsync ()
        {
             ApiResponse<PricingConf> localVarResponse = await PricingConfigGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PricingConf)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PricingConf>> PricingConfigGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/s4s-pricing/pricingConfig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PricingConfigGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PricingConf>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PricingConf) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PricingConf)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>string</returns>
        public string PricingConfigPut (PricingConf a = null)
        {
             ApiResponse<string> localVarResponse = PricingConfigPutWithHttpInfo(a);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PricingConfigPutWithHttpInfo (PricingConf a = null)
        {

            var localVarPath = "/s4s-pricing/pricingConfig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (a != null && a.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(a); // http body (model) parameter
            }
            else
            {
                localVarPostBody = a; // byte array
            }

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PricingConfigPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PricingConfigPutAsync (PricingConf a = null)
        {
             ApiResponse<string> localVarResponse = await PricingConfigPutAsyncWithHttpInfo(a);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PricingConfigPutAsyncWithHttpInfo (PricingConf a = null)
        {

            var localVarPath = "/s4s-pricing/pricingConfig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (a != null && a.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(a); // http body (model) parameter
            }
            else
            {
                localVarPostBody = a; // byte array
            }

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PricingConfigPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PricingUiConf</returns>
        public PricingUiConf PricingUiConf ()
        {
             ApiResponse<PricingUiConf> localVarResponse = PricingUiConfWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PricingUiConf</returns>
        public ApiResponse< PricingUiConf > PricingUiConfWithHttpInfo ()
        {

            var localVarPath = "/s4s-pricing/pricingUiConf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PricingUiConf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PricingUiConf>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PricingUiConf) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PricingUiConf)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PricingUiConf</returns>
        public async System.Threading.Tasks.Task<PricingUiConf> PricingUiConfAsync ()
        {
             ApiResponse<PricingUiConf> localVarResponse = await PricingUiConfAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PricingUiConf)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PricingUiConf>> PricingUiConfAsyncWithHttpInfo ()
        {

            var localVarPath = "/s4s-pricing/pricingUiConf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PricingUiConf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PricingUiConf>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PricingUiConf) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PricingUiConf)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PricingUiConf</returns>
        public PricingUiConf PricingUiConfigGet ()
        {
             ApiResponse<PricingUiConf> localVarResponse = PricingUiConfigGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PricingUiConf</returns>
        public ApiResponse< PricingUiConf > PricingUiConfigGetWithHttpInfo ()
        {

            var localVarPath = "/s4s-pricing/pricingUiConfig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PricingUiConfigGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PricingUiConf>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PricingUiConf) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PricingUiConf)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PricingUiConf</returns>
        public async System.Threading.Tasks.Task<PricingUiConf> PricingUiConfigGetAsync ()
        {
             ApiResponse<PricingUiConf> localVarResponse = await PricingUiConfigGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PricingUiConf)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PricingUiConf>> PricingUiConfigGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/s4s-pricing/pricingUiConfig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PricingUiConfigGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PricingUiConf>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PricingUiConf) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PricingUiConf)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>string</returns>
        public string PricingUiConfigPut (PricingUiConf a = null)
        {
             ApiResponse<string> localVarResponse = PricingUiConfigPutWithHttpInfo(a);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PricingUiConfigPutWithHttpInfo (PricingUiConf a = null)
        {

            var localVarPath = "/s4s-pricing/pricingUiConfig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (a != null && a.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(a); // http body (model) parameter
            }
            else
            {
                localVarPostBody = a; // byte array
            }

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PricingUiConfigPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PricingUiConfigPutAsync (PricingUiConf a = null)
        {
             ApiResponse<string> localVarResponse = await PricingUiConfigPutAsyncWithHttpInfo(a);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PricingUiConfigPutAsyncWithHttpInfo (PricingUiConf a = null)
        {

            var localVarPath = "/s4s-pricing/pricingUiConfig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (a != null && a.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(a); // http body (model) parameter
            }
            else
            {
                localVarPostBody = a; // byte array
            }

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PricingUiConfigPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

    }
}
