/* 
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISsProductApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Relationate a new product with the customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="expirationOffset"></param>
        /// <param name="overrideEnjoyId"></param>
        /// <param name="overrideSubscriptionId"></param>
        /// <param name="newEnjoy"> (optional)</param>
        /// <returns>CustomerPack</returns>
        CustomerPack CustomerEnjoyAdd (string customerId, long? expirationOffset, string overrideEnjoyId, string overrideSubscriptionId, CustomerPack newEnjoy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Relationate a new product with the customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="expirationOffset"></param>
        /// <param name="overrideEnjoyId"></param>
        /// <param name="overrideSubscriptionId"></param>
        /// <param name="newEnjoy"> (optional)</param>
        /// <returns>ApiResponse of CustomerPack</returns>
        ApiResponse<CustomerPack> CustomerEnjoyAddWithHttpInfo (string customerId, long? expirationOffset, string overrideEnjoyId, string overrideSubscriptionId, CustomerPack newEnjoy = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Will close the enjoyId product, an create the the a new equivalent EnjoyProduct. Only refreshing the limits if its need
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="enjoyId"></param>
        /// <returns>CustomerPack</returns>
        CustomerPack CustomerEnjoyClose (string customerId, string enjoyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Will close the enjoyId product, an create the the a new equivalent EnjoyProduct. Only refreshing the limits if its need
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="enjoyId"></param>
        /// <returns>ApiResponse of CustomerPack</returns>
        ApiResponse<CustomerPack> CustomerEnjoyCloseWithHttpInfo (string customerId, string enjoyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a certain product releated to customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="enjoyId"></param>
        /// <returns>CustomerPack</returns>
        CustomerPack CustomerEnjoyGet (string customerId, string enjoyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a certain product releated to customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="enjoyId"></param>
        /// <returns>ApiResponse of CustomerPack</returns>
        ApiResponse<CustomerPack> CustomerEnjoyGetWithHttpInfo (string customerId, string enjoyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all the current products relationed with the customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> CustomerEnjoyGetAll (string customerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all the current products relationed with the customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> CustomerEnjoyGetAllWithHttpInfo (string customerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="customerPackId"></param>
        /// <returns>Dictionary&lt;string, long?&gt;</returns>
        Dictionary<string, long?> CustomerEnjoySpend (string customerId, string customerPackId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="customerPackId"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, long?&gt;</returns>
        ApiResponse<Dictionary<string, long?>> CustomerEnjoySpendWithHttpInfo (string customerId, string customerPackId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadResourceStatusList"></param>
        /// <returns></returns>
        void CustomerEnjoyValues (string customerId, int? page, int? numberPerPage, bool? loadResourceStatusList);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadResourceStatusList"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomerEnjoyValuesWithHttpInfo (string customerId, int? page, int? numberPerPage, bool? loadResourceStatusList);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="id"></param>
        /// <returns>CustomerPack</returns>
        CustomerPack CustomerHistoryPackGet (string customerId, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of CustomerPack</returns>
        ApiResponse<CustomerPack> CustomerHistoryPackGetWithHttpInfo (string customerId, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> CustomerHistoryPackGetAll (string customerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> CustomerHistoryPackGetAllWithHttpInfo (string customerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadResourceStatusList"></param>
        /// <returns></returns>
        void CustomerHistoryPackValues (string customerId, int? page, int? numberPerPage, bool? loadResourceStatusList);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadResourceStatusList"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomerHistoryPackValuesWithHttpInfo (string customerId, int? page, int? numberPerPage, bool? loadResourceStatusList);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="id"></param>
        /// <returns>CustomerPack</returns>
        CustomerPack CustomerHistorySubscriptionGet (string customerId, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of CustomerPack</returns>
        ApiResponse<CustomerPack> CustomerHistorySubscriptionGetWithHttpInfo (string customerId, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> CustomerHistorySubscriptionGetAll (string customerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> CustomerHistorySubscriptionGetAllWithHttpInfo (string customerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadResourceStatusList"></param>
        /// <returns></returns>
        void CustomerHistorySubscriptionValues (string customerId, int? page, int? numberPerPage, bool? loadResourceStatusList);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadResourceStatusList"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomerHistorySubscriptionValuesWithHttpInfo (string customerId, int? page, int? numberPerPage, bool? loadResourceStatusList);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns></returns>
        void CustomerResource (string customerId, int? page, int? numberPerPage);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomerResourceWithHttpInfo (string customerId, int? page, int? numberPerPage);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new subscription to customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="overrideSubscriptionId"></param>
        /// <param name="overrideEnjoyId"></param>
        /// <param name="newSubscription"> (optional)</param>
        /// <returns>CustomerPackSubscription</returns>
        CustomerPackSubscription CustomerSubscriptionAdd (string customerId, string overrideSubscriptionId, string overrideEnjoyId, CustomerPackSubscription newSubscription = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new subscription to customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="overrideSubscriptionId"></param>
        /// <param name="overrideEnjoyId"></param>
        /// <param name="newSubscription"> (optional)</param>
        /// <returns>ApiResponse of CustomerPackSubscription</returns>
        ApiResponse<CustomerPackSubscription> CustomerSubscriptionAddWithHttpInfo (string customerId, string overrideSubscriptionId, string overrideEnjoyId, CustomerPackSubscription newSubscription = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="subscriptionId"></param>
        /// <returns>string</returns>
        string CustomerSubscriptionClose (string customerId, string subscriptionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="subscriptionId"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CustomerSubscriptionCloseWithHttpInfo (string customerId, string subscriptionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a subscription by its Ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="subscriptionId"></param>
        /// <returns>CustomerPackSubscription</returns>
        CustomerPackSubscription CustomerSubscriptionGet (string customerId, string subscriptionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a subscription by its Ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="subscriptionId"></param>
        /// <returns>ApiResponse of CustomerPackSubscription</returns>
        ApiResponse<CustomerPackSubscription> CustomerSubscriptionGetWithHttpInfo (string customerId, string subscriptionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all the current subscriptions of a customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> CustomerSubscriptionGetAll (string customerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all the current subscriptions of a customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> CustomerSubscriptionGetAllWithHttpInfo (string customerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="subscriptionId"></param>
        /// <returns>string</returns>
        string CustomerSubscriptionRenew (string customerId, string subscriptionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="subscriptionId"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CustomerSubscriptionRenewWithHttpInfo (string customerId, string subscriptionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="customerSubscriptionId"></param>
        /// <returns>Dictionary&lt;string, long?&gt;</returns>
        Dictionary<string, long?> CustomerSubscriptionSpend (string customerId, string customerSubscriptionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="customerSubscriptionId"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, long?&gt;</returns>
        ApiResponse<Dictionary<string, long?>> CustomerSubscriptionSpendWithHttpInfo (string customerId, string customerSubscriptionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadDefaultUser"></param>
        /// <returns></returns>
        void CustomerSubscriptionValues (string customerId, int? page, int? numberPerPage, bool? loadDefaultUser);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadDefaultUser"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomerSubscriptionValuesWithHttpInfo (string customerId, int? page, int? numberPerPage, bool? loadDefaultUser);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ProductConf</returns>
        ProductConf ProductConfigGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ProductConf</returns>
        ApiResponse<ProductConf> ProductConfigGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>string</returns>
        string ProductConfigPut (ProductConf a = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ProductConfigPutWithHttpInfo (ProductConf a = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Relationate a new product with the customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="expirationOffset"></param>
        /// <param name="overrideEnjoyId"></param>
        /// <param name="overrideSubscriptionId"></param>
        /// <param name="newEnjoy"> (optional)</param>
        /// <returns>Task of CustomerPack</returns>
        System.Threading.Tasks.Task<CustomerPack> CustomerEnjoyAddAsync (string customerId, long? expirationOffset, string overrideEnjoyId, string overrideSubscriptionId, CustomerPack newEnjoy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Relationate a new product with the customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="expirationOffset"></param>
        /// <param name="overrideEnjoyId"></param>
        /// <param name="overrideSubscriptionId"></param>
        /// <param name="newEnjoy"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomerPack)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerPack>> CustomerEnjoyAddAsyncWithHttpInfo (string customerId, long? expirationOffset, string overrideEnjoyId, string overrideSubscriptionId, CustomerPack newEnjoy = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Will close the enjoyId product, an create the the a new equivalent EnjoyProduct. Only refreshing the limits if its need
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="enjoyId"></param>
        /// <returns>Task of CustomerPack</returns>
        System.Threading.Tasks.Task<CustomerPack> CustomerEnjoyCloseAsync (string customerId, string enjoyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Will close the enjoyId product, an create the the a new equivalent EnjoyProduct. Only refreshing the limits if its need
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="enjoyId"></param>
        /// <returns>Task of ApiResponse (CustomerPack)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerPack>> CustomerEnjoyCloseAsyncWithHttpInfo (string customerId, string enjoyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a certain product releated to customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="enjoyId"></param>
        /// <returns>Task of CustomerPack</returns>
        System.Threading.Tasks.Task<CustomerPack> CustomerEnjoyGetAsync (string customerId, string enjoyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a certain product releated to customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="enjoyId"></param>
        /// <returns>Task of ApiResponse (CustomerPack)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerPack>> CustomerEnjoyGetAsyncWithHttpInfo (string customerId, string enjoyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all the current products relationed with the customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> CustomerEnjoyGetAllAsync (string customerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all the current products relationed with the customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> CustomerEnjoyGetAllAsyncWithHttpInfo (string customerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="customerPackId"></param>
        /// <returns>Task of Dictionary&lt;string, long?&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, long?>> CustomerEnjoySpendAsync (string customerId, string customerPackId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="customerPackId"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, long?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, long?>>> CustomerEnjoySpendAsyncWithHttpInfo (string customerId, string customerPackId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadResourceStatusList"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomerEnjoyValuesAsync (string customerId, int? page, int? numberPerPage, bool? loadResourceStatusList);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadResourceStatusList"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomerEnjoyValuesAsyncWithHttpInfo (string customerId, int? page, int? numberPerPage, bool? loadResourceStatusList);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="id"></param>
        /// <returns>Task of CustomerPack</returns>
        System.Threading.Tasks.Task<CustomerPack> CustomerHistoryPackGetAsync (string customerId, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (CustomerPack)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerPack>> CustomerHistoryPackGetAsyncWithHttpInfo (string customerId, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> CustomerHistoryPackGetAllAsync (string customerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> CustomerHistoryPackGetAllAsyncWithHttpInfo (string customerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadResourceStatusList"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomerHistoryPackValuesAsync (string customerId, int? page, int? numberPerPage, bool? loadResourceStatusList);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadResourceStatusList"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomerHistoryPackValuesAsyncWithHttpInfo (string customerId, int? page, int? numberPerPage, bool? loadResourceStatusList);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="id"></param>
        /// <returns>Task of CustomerPack</returns>
        System.Threading.Tasks.Task<CustomerPack> CustomerHistorySubscriptionGetAsync (string customerId, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (CustomerPack)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerPack>> CustomerHistorySubscriptionGetAsyncWithHttpInfo (string customerId, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> CustomerHistorySubscriptionGetAllAsync (string customerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> CustomerHistorySubscriptionGetAllAsyncWithHttpInfo (string customerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadResourceStatusList"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomerHistorySubscriptionValuesAsync (string customerId, int? page, int? numberPerPage, bool? loadResourceStatusList);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadResourceStatusList"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomerHistorySubscriptionValuesAsyncWithHttpInfo (string customerId, int? page, int? numberPerPage, bool? loadResourceStatusList);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomerResourceAsync (string customerId, int? page, int? numberPerPage);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomerResourceAsyncWithHttpInfo (string customerId, int? page, int? numberPerPage);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new subscription to customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="overrideSubscriptionId"></param>
        /// <param name="overrideEnjoyId"></param>
        /// <param name="newSubscription"> (optional)</param>
        /// <returns>Task of CustomerPackSubscription</returns>
        System.Threading.Tasks.Task<CustomerPackSubscription> CustomerSubscriptionAddAsync (string customerId, string overrideSubscriptionId, string overrideEnjoyId, CustomerPackSubscription newSubscription = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new subscription to customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="overrideSubscriptionId"></param>
        /// <param name="overrideEnjoyId"></param>
        /// <param name="newSubscription"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomerPackSubscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerPackSubscription>> CustomerSubscriptionAddAsyncWithHttpInfo (string customerId, string overrideSubscriptionId, string overrideEnjoyId, CustomerPackSubscription newSubscription = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="subscriptionId"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CustomerSubscriptionCloseAsync (string customerId, string subscriptionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="subscriptionId"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CustomerSubscriptionCloseAsyncWithHttpInfo (string customerId, string subscriptionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a subscription by its Ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="subscriptionId"></param>
        /// <returns>Task of CustomerPackSubscription</returns>
        System.Threading.Tasks.Task<CustomerPackSubscription> CustomerSubscriptionGetAsync (string customerId, string subscriptionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a subscription by its Ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="subscriptionId"></param>
        /// <returns>Task of ApiResponse (CustomerPackSubscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerPackSubscription>> CustomerSubscriptionGetAsyncWithHttpInfo (string customerId, string subscriptionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all the current subscriptions of a customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> CustomerSubscriptionGetAllAsync (string customerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all the current subscriptions of a customer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> CustomerSubscriptionGetAllAsyncWithHttpInfo (string customerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="subscriptionId"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CustomerSubscriptionRenewAsync (string customerId, string subscriptionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="subscriptionId"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CustomerSubscriptionRenewAsyncWithHttpInfo (string customerId, string subscriptionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="customerSubscriptionId"></param>
        /// <returns>Task of Dictionary&lt;string, long?&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, long?>> CustomerSubscriptionSpendAsync (string customerId, string customerSubscriptionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="customerSubscriptionId"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, long?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, long?>>> CustomerSubscriptionSpendAsyncWithHttpInfo (string customerId, string customerSubscriptionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadDefaultUser"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomerSubscriptionValuesAsync (string customerId, int? page, int? numberPerPage, bool? loadDefaultUser);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadDefaultUser"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomerSubscriptionValuesAsyncWithHttpInfo (string customerId, int? page, int? numberPerPage, bool? loadDefaultUser);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ProductConf</returns>
        System.Threading.Tasks.Task<ProductConf> ProductConfigGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ProductConf)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductConf>> ProductConfigGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ProductConfigPutAsync (ProductConf a = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ProductConfigPutAsyncWithHttpInfo (ProductConf a = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SsProductApi : ISsProductApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SsProductApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SsProductApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SsProductApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SsProductApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Relationate a new product with the customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="expirationOffset"></param>
        /// <param name="overrideEnjoyId"></param>
        /// <param name="overrideSubscriptionId"></param>
        /// <param name="newEnjoy"> (optional)</param>
        /// <returns>CustomerPack</returns>
        public CustomerPack CustomerEnjoyAdd (string customerId, long? expirationOffset, string overrideEnjoyId, string overrideSubscriptionId, CustomerPack newEnjoy = null)
        {
             ApiResponse<CustomerPack> localVarResponse = CustomerEnjoyAddWithHttpInfo(customerId, expirationOffset, overrideEnjoyId, overrideSubscriptionId, newEnjoy);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Relationate a new product with the customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="expirationOffset"></param>
        /// <param name="overrideEnjoyId"></param>
        /// <param name="overrideSubscriptionId"></param>
        /// <param name="newEnjoy"> (optional)</param>
        /// <returns>ApiResponse of CustomerPack</returns>
        public ApiResponse< CustomerPack > CustomerEnjoyAddWithHttpInfo (string customerId, long? expirationOffset, string overrideEnjoyId, string overrideSubscriptionId, CustomerPack newEnjoy = null)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerEnjoyAdd");
            // verify the required parameter 'expirationOffset' is set
            if (expirationOffset == null)
                throw new ApiException(400, "Missing required parameter 'expirationOffset' when calling SsProductApi->CustomerEnjoyAdd");
            // verify the required parameter 'overrideEnjoyId' is set
            if (overrideEnjoyId == null)
                throw new ApiException(400, "Missing required parameter 'overrideEnjoyId' when calling SsProductApi->CustomerEnjoyAdd");
            // verify the required parameter 'overrideSubscriptionId' is set
            if (overrideSubscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'overrideSubscriptionId' when calling SsProductApi->CustomerEnjoyAdd");

            var localVarPath = "/s4s-product/customer/{customer-id}/enjoy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (expirationOffset != null) localVarQueryParams.Add("expiration-offset", Configuration.ApiClient.ParameterToString(expirationOffset)); // query parameter
            if (overrideEnjoyId != null) localVarQueryParams.Add("override-enjoy-id", Configuration.ApiClient.ParameterToString(overrideEnjoyId)); // query parameter
            if (overrideSubscriptionId != null) localVarQueryParams.Add("override-subscription-id", Configuration.ApiClient.ParameterToString(overrideSubscriptionId)); // query parameter
            if (newEnjoy != null && newEnjoy.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(newEnjoy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newEnjoy; // byte array
            }

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerEnjoyAdd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPack) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPack)));
            
        }

        /// <summary>
        ///  Relationate a new product with the customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="expirationOffset"></param>
        /// <param name="overrideEnjoyId"></param>
        /// <param name="overrideSubscriptionId"></param>
        /// <param name="newEnjoy"> (optional)</param>
        /// <returns>Task of CustomerPack</returns>
        public async System.Threading.Tasks.Task<CustomerPack> CustomerEnjoyAddAsync (string customerId, long? expirationOffset, string overrideEnjoyId, string overrideSubscriptionId, CustomerPack newEnjoy = null)
        {
             ApiResponse<CustomerPack> localVarResponse = await CustomerEnjoyAddAsyncWithHttpInfo(customerId, expirationOffset, overrideEnjoyId, overrideSubscriptionId, newEnjoy);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Relationate a new product with the customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="expirationOffset"></param>
        /// <param name="overrideEnjoyId"></param>
        /// <param name="overrideSubscriptionId"></param>
        /// <param name="newEnjoy"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomerPack)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerPack>> CustomerEnjoyAddAsyncWithHttpInfo (string customerId, long? expirationOffset, string overrideEnjoyId, string overrideSubscriptionId, CustomerPack newEnjoy = null)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerEnjoyAdd");
            // verify the required parameter 'expirationOffset' is set
            if (expirationOffset == null)
                throw new ApiException(400, "Missing required parameter 'expirationOffset' when calling SsProductApi->CustomerEnjoyAdd");
            // verify the required parameter 'overrideEnjoyId' is set
            if (overrideEnjoyId == null)
                throw new ApiException(400, "Missing required parameter 'overrideEnjoyId' when calling SsProductApi->CustomerEnjoyAdd");
            // verify the required parameter 'overrideSubscriptionId' is set
            if (overrideSubscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'overrideSubscriptionId' when calling SsProductApi->CustomerEnjoyAdd");

            var localVarPath = "/s4s-product/customer/{customer-id}/enjoy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (expirationOffset != null) localVarQueryParams.Add("expiration-offset", Configuration.ApiClient.ParameterToString(expirationOffset)); // query parameter
            if (overrideEnjoyId != null) localVarQueryParams.Add("override-enjoy-id", Configuration.ApiClient.ParameterToString(overrideEnjoyId)); // query parameter
            if (overrideSubscriptionId != null) localVarQueryParams.Add("override-subscription-id", Configuration.ApiClient.ParameterToString(overrideSubscriptionId)); // query parameter
            if (newEnjoy != null && newEnjoy.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(newEnjoy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newEnjoy; // byte array
            }

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerEnjoyAdd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPack) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPack)));
            
        }

        /// <summary>
        ///  Will close the enjoyId product, an create the the a new equivalent EnjoyProduct. Only refreshing the limits if its need
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="enjoyId"></param>
        /// <returns>CustomerPack</returns>
        public CustomerPack CustomerEnjoyClose (string customerId, string enjoyId)
        {
             ApiResponse<CustomerPack> localVarResponse = CustomerEnjoyCloseWithHttpInfo(customerId, enjoyId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Will close the enjoyId product, an create the the a new equivalent EnjoyProduct. Only refreshing the limits if its need
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="enjoyId"></param>
        /// <returns>ApiResponse of CustomerPack</returns>
        public ApiResponse< CustomerPack > CustomerEnjoyCloseWithHttpInfo (string customerId, string enjoyId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerEnjoyClose");
            // verify the required parameter 'enjoyId' is set
            if (enjoyId == null)
                throw new ApiException(400, "Missing required parameter 'enjoyId' when calling SsProductApi->CustomerEnjoyClose");

            var localVarPath = "/s4s-product/customer/{customer-id}/enjoy/{enjoy-id}/close";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (enjoyId != null) localVarPathParams.Add("enjoy-id", Configuration.ApiClient.ParameterToString(enjoyId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerEnjoyClose", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPack) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPack)));
            
        }

        /// <summary>
        ///  Will close the enjoyId product, an create the the a new equivalent EnjoyProduct. Only refreshing the limits if its need
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="enjoyId"></param>
        /// <returns>Task of CustomerPack</returns>
        public async System.Threading.Tasks.Task<CustomerPack> CustomerEnjoyCloseAsync (string customerId, string enjoyId)
        {
             ApiResponse<CustomerPack> localVarResponse = await CustomerEnjoyCloseAsyncWithHttpInfo(customerId, enjoyId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Will close the enjoyId product, an create the the a new equivalent EnjoyProduct. Only refreshing the limits if its need
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="enjoyId"></param>
        /// <returns>Task of ApiResponse (CustomerPack)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerPack>> CustomerEnjoyCloseAsyncWithHttpInfo (string customerId, string enjoyId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerEnjoyClose");
            // verify the required parameter 'enjoyId' is set
            if (enjoyId == null)
                throw new ApiException(400, "Missing required parameter 'enjoyId' when calling SsProductApi->CustomerEnjoyClose");

            var localVarPath = "/s4s-product/customer/{customer-id}/enjoy/{enjoy-id}/close";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (enjoyId != null) localVarPathParams.Add("enjoy-id", Configuration.ApiClient.ParameterToString(enjoyId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerEnjoyClose", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPack) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPack)));
            
        }

        /// <summary>
        ///  Get a certain product releated to customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="enjoyId"></param>
        /// <returns>CustomerPack</returns>
        public CustomerPack CustomerEnjoyGet (string customerId, string enjoyId)
        {
             ApiResponse<CustomerPack> localVarResponse = CustomerEnjoyGetWithHttpInfo(customerId, enjoyId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a certain product releated to customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="enjoyId"></param>
        /// <returns>ApiResponse of CustomerPack</returns>
        public ApiResponse< CustomerPack > CustomerEnjoyGetWithHttpInfo (string customerId, string enjoyId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerEnjoyGet");
            // verify the required parameter 'enjoyId' is set
            if (enjoyId == null)
                throw new ApiException(400, "Missing required parameter 'enjoyId' when calling SsProductApi->CustomerEnjoyGet");

            var localVarPath = "/s4s-product/customer/{customer-id}/enjoy/{enjoy-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (enjoyId != null) localVarPathParams.Add("enjoy-id", Configuration.ApiClient.ParameterToString(enjoyId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerEnjoyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPack) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPack)));
            
        }

        /// <summary>
        ///  Get a certain product releated to customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="enjoyId"></param>
        /// <returns>Task of CustomerPack</returns>
        public async System.Threading.Tasks.Task<CustomerPack> CustomerEnjoyGetAsync (string customerId, string enjoyId)
        {
             ApiResponse<CustomerPack> localVarResponse = await CustomerEnjoyGetAsyncWithHttpInfo(customerId, enjoyId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get a certain product releated to customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="enjoyId"></param>
        /// <returns>Task of ApiResponse (CustomerPack)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerPack>> CustomerEnjoyGetAsyncWithHttpInfo (string customerId, string enjoyId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerEnjoyGet");
            // verify the required parameter 'enjoyId' is set
            if (enjoyId == null)
                throw new ApiException(400, "Missing required parameter 'enjoyId' when calling SsProductApi->CustomerEnjoyGet");

            var localVarPath = "/s4s-product/customer/{customer-id}/enjoy/{enjoy-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (enjoyId != null) localVarPathParams.Add("enjoy-id", Configuration.ApiClient.ParameterToString(enjoyId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerEnjoyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPack) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPack)));
            
        }

        /// <summary>
        ///  Get all the current products relationed with the customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> CustomerEnjoyGetAll (string customerId)
        {
             ApiResponse<List<string>> localVarResponse = CustomerEnjoyGetAllWithHttpInfo(customerId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all the current products relationed with the customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > CustomerEnjoyGetAllWithHttpInfo (string customerId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerEnjoyGetAll");

            var localVarPath = "/s4s-product/customer/{customer-id}/enjoy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerEnjoyGetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        ///  Get all the current products relationed with the customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> CustomerEnjoyGetAllAsync (string customerId)
        {
             ApiResponse<List<string>> localVarResponse = await CustomerEnjoyGetAllAsyncWithHttpInfo(customerId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get all the current products relationed with the customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> CustomerEnjoyGetAllAsyncWithHttpInfo (string customerId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerEnjoyGetAll");

            var localVarPath = "/s4s-product/customer/{customer-id}/enjoy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerEnjoyGetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="customerPackId"></param>
        /// <returns>Dictionary&lt;string, long?&gt;</returns>
        public Dictionary<string, long?> CustomerEnjoySpend (string customerId, string customerPackId)
        {
             ApiResponse<Dictionary<string, long?>> localVarResponse = CustomerEnjoySpendWithHttpInfo(customerId, customerPackId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="customerPackId"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, long?&gt;</returns>
        public ApiResponse< Dictionary<string, long?> > CustomerEnjoySpendWithHttpInfo (string customerId, string customerPackId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerEnjoySpend");
            // verify the required parameter 'customerPackId' is set
            if (customerPackId == null)
                throw new ApiException(400, "Missing required parameter 'customerPackId' when calling SsProductApi->CustomerEnjoySpend");

            var localVarPath = "/s4s-product/customer/{customer-id}/enjoy/{customer-pack-id}/spend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (customerPackId != null) localVarPathParams.Add("customer-pack-id", Configuration.ApiClient.ParameterToString(customerPackId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerEnjoySpend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, long?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, long?>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, long?>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="customerPackId"></param>
        /// <returns>Task of Dictionary&lt;string, long?&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, long?>> CustomerEnjoySpendAsync (string customerId, string customerPackId)
        {
             ApiResponse<Dictionary<string, long?>> localVarResponse = await CustomerEnjoySpendAsyncWithHttpInfo(customerId, customerPackId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="customerPackId"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, long?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, long?>>> CustomerEnjoySpendAsyncWithHttpInfo (string customerId, string customerPackId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerEnjoySpend");
            // verify the required parameter 'customerPackId' is set
            if (customerPackId == null)
                throw new ApiException(400, "Missing required parameter 'customerPackId' when calling SsProductApi->CustomerEnjoySpend");

            var localVarPath = "/s4s-product/customer/{customer-id}/enjoy/{customer-pack-id}/spend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (customerPackId != null) localVarPathParams.Add("customer-pack-id", Configuration.ApiClient.ParameterToString(customerPackId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerEnjoySpend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, long?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, long?>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, long?>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadResourceStatusList"></param>
        /// <returns></returns>
        public void CustomerEnjoyValues (string customerId, int? page, int? numberPerPage, bool? loadResourceStatusList)
        {
             CustomerEnjoyValuesWithHttpInfo(customerId, page, numberPerPage, loadResourceStatusList);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadResourceStatusList"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomerEnjoyValuesWithHttpInfo (string customerId, int? page, int? numberPerPage, bool? loadResourceStatusList)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerEnjoyValues");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling SsProductApi->CustomerEnjoyValues");
            // verify the required parameter 'numberPerPage' is set
            if (numberPerPage == null)
                throw new ApiException(400, "Missing required parameter 'numberPerPage' when calling SsProductApi->CustomerEnjoyValues");
            // verify the required parameter 'loadResourceStatusList' is set
            if (loadResourceStatusList == null)
                throw new ApiException(400, "Missing required parameter 'loadResourceStatusList' when calling SsProductApi->CustomerEnjoyValues");

            var localVarPath = "/s4s-product/customer/{customer-id}/enjoy/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (numberPerPage != null) localVarQueryParams.Add("number-per-page", Configuration.ApiClient.ParameterToString(numberPerPage)); // query parameter
            if (loadResourceStatusList != null) localVarQueryParams.Add("load-resource-status-list", Configuration.ApiClient.ParameterToString(loadResourceStatusList)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerEnjoyValues", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadResourceStatusList"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomerEnjoyValuesAsync (string customerId, int? page, int? numberPerPage, bool? loadResourceStatusList)
        {
             await CustomerEnjoyValuesAsyncWithHttpInfo(customerId, page, numberPerPage, loadResourceStatusList);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadResourceStatusList"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomerEnjoyValuesAsyncWithHttpInfo (string customerId, int? page, int? numberPerPage, bool? loadResourceStatusList)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerEnjoyValues");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling SsProductApi->CustomerEnjoyValues");
            // verify the required parameter 'numberPerPage' is set
            if (numberPerPage == null)
                throw new ApiException(400, "Missing required parameter 'numberPerPage' when calling SsProductApi->CustomerEnjoyValues");
            // verify the required parameter 'loadResourceStatusList' is set
            if (loadResourceStatusList == null)
                throw new ApiException(400, "Missing required parameter 'loadResourceStatusList' when calling SsProductApi->CustomerEnjoyValues");

            var localVarPath = "/s4s-product/customer/{customer-id}/enjoy/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (numberPerPage != null) localVarQueryParams.Add("number-per-page", Configuration.ApiClient.ParameterToString(numberPerPage)); // query parameter
            if (loadResourceStatusList != null) localVarQueryParams.Add("load-resource-status-list", Configuration.ApiClient.ParameterToString(loadResourceStatusList)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerEnjoyValues", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="id"></param>
        /// <returns>CustomerPack</returns>
        public CustomerPack CustomerHistoryPackGet (string customerId, string id)
        {
             ApiResponse<CustomerPack> localVarResponse = CustomerHistoryPackGetWithHttpInfo(customerId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of CustomerPack</returns>
        public ApiResponse< CustomerPack > CustomerHistoryPackGetWithHttpInfo (string customerId, string id)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerHistoryPackGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SsProductApi->CustomerHistoryPackGet");

            var localVarPath = "/s4s-product/customer/{customer-id}/history/pack/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerHistoryPackGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPack) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPack)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="id"></param>
        /// <returns>Task of CustomerPack</returns>
        public async System.Threading.Tasks.Task<CustomerPack> CustomerHistoryPackGetAsync (string customerId, string id)
        {
             ApiResponse<CustomerPack> localVarResponse = await CustomerHistoryPackGetAsyncWithHttpInfo(customerId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (CustomerPack)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerPack>> CustomerHistoryPackGetAsyncWithHttpInfo (string customerId, string id)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerHistoryPackGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SsProductApi->CustomerHistoryPackGet");

            var localVarPath = "/s4s-product/customer/{customer-id}/history/pack/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerHistoryPackGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPack) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPack)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> CustomerHistoryPackGetAll (string customerId)
        {
             ApiResponse<List<string>> localVarResponse = CustomerHistoryPackGetAllWithHttpInfo(customerId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > CustomerHistoryPackGetAllWithHttpInfo (string customerId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerHistoryPackGetAll");

            var localVarPath = "/s4s-product/customer/{customer-id}/history/pack";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerHistoryPackGetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> CustomerHistoryPackGetAllAsync (string customerId)
        {
             ApiResponse<List<string>> localVarResponse = await CustomerHistoryPackGetAllAsyncWithHttpInfo(customerId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> CustomerHistoryPackGetAllAsyncWithHttpInfo (string customerId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerHistoryPackGetAll");

            var localVarPath = "/s4s-product/customer/{customer-id}/history/pack";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerHistoryPackGetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadResourceStatusList"></param>
        /// <returns></returns>
        public void CustomerHistoryPackValues (string customerId, int? page, int? numberPerPage, bool? loadResourceStatusList)
        {
             CustomerHistoryPackValuesWithHttpInfo(customerId, page, numberPerPage, loadResourceStatusList);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadResourceStatusList"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomerHistoryPackValuesWithHttpInfo (string customerId, int? page, int? numberPerPage, bool? loadResourceStatusList)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerHistoryPackValues");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling SsProductApi->CustomerHistoryPackValues");
            // verify the required parameter 'numberPerPage' is set
            if (numberPerPage == null)
                throw new ApiException(400, "Missing required parameter 'numberPerPage' when calling SsProductApi->CustomerHistoryPackValues");
            // verify the required parameter 'loadResourceStatusList' is set
            if (loadResourceStatusList == null)
                throw new ApiException(400, "Missing required parameter 'loadResourceStatusList' when calling SsProductApi->CustomerHistoryPackValues");

            var localVarPath = "/s4s-product/customer/{customer-id}/history/pack/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (numberPerPage != null) localVarQueryParams.Add("number-per-page", Configuration.ApiClient.ParameterToString(numberPerPage)); // query parameter
            if (loadResourceStatusList != null) localVarQueryParams.Add("load-resource-status-list", Configuration.ApiClient.ParameterToString(loadResourceStatusList)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerHistoryPackValues", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadResourceStatusList"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomerHistoryPackValuesAsync (string customerId, int? page, int? numberPerPage, bool? loadResourceStatusList)
        {
             await CustomerHistoryPackValuesAsyncWithHttpInfo(customerId, page, numberPerPage, loadResourceStatusList);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadResourceStatusList"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomerHistoryPackValuesAsyncWithHttpInfo (string customerId, int? page, int? numberPerPage, bool? loadResourceStatusList)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerHistoryPackValues");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling SsProductApi->CustomerHistoryPackValues");
            // verify the required parameter 'numberPerPage' is set
            if (numberPerPage == null)
                throw new ApiException(400, "Missing required parameter 'numberPerPage' when calling SsProductApi->CustomerHistoryPackValues");
            // verify the required parameter 'loadResourceStatusList' is set
            if (loadResourceStatusList == null)
                throw new ApiException(400, "Missing required parameter 'loadResourceStatusList' when calling SsProductApi->CustomerHistoryPackValues");

            var localVarPath = "/s4s-product/customer/{customer-id}/history/pack/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (numberPerPage != null) localVarQueryParams.Add("number-per-page", Configuration.ApiClient.ParameterToString(numberPerPage)); // query parameter
            if (loadResourceStatusList != null) localVarQueryParams.Add("load-resource-status-list", Configuration.ApiClient.ParameterToString(loadResourceStatusList)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerHistoryPackValues", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="id"></param>
        /// <returns>CustomerPack</returns>
        public CustomerPack CustomerHistorySubscriptionGet (string customerId, string id)
        {
             ApiResponse<CustomerPack> localVarResponse = CustomerHistorySubscriptionGetWithHttpInfo(customerId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of CustomerPack</returns>
        public ApiResponse< CustomerPack > CustomerHistorySubscriptionGetWithHttpInfo (string customerId, string id)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerHistorySubscriptionGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SsProductApi->CustomerHistorySubscriptionGet");

            var localVarPath = "/s4s-product/customer/{customer-id}/history/subscription/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerHistorySubscriptionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPack) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPack)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="id"></param>
        /// <returns>Task of CustomerPack</returns>
        public async System.Threading.Tasks.Task<CustomerPack> CustomerHistorySubscriptionGetAsync (string customerId, string id)
        {
             ApiResponse<CustomerPack> localVarResponse = await CustomerHistorySubscriptionGetAsyncWithHttpInfo(customerId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (CustomerPack)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerPack>> CustomerHistorySubscriptionGetAsyncWithHttpInfo (string customerId, string id)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerHistorySubscriptionGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SsProductApi->CustomerHistorySubscriptionGet");

            var localVarPath = "/s4s-product/customer/{customer-id}/history/subscription/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerHistorySubscriptionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPack) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPack)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> CustomerHistorySubscriptionGetAll (string customerId)
        {
             ApiResponse<List<string>> localVarResponse = CustomerHistorySubscriptionGetAllWithHttpInfo(customerId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > CustomerHistorySubscriptionGetAllWithHttpInfo (string customerId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerHistorySubscriptionGetAll");

            var localVarPath = "/s4s-product/customer/{customer-id}/history/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerHistorySubscriptionGetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> CustomerHistorySubscriptionGetAllAsync (string customerId)
        {
             ApiResponse<List<string>> localVarResponse = await CustomerHistorySubscriptionGetAllAsyncWithHttpInfo(customerId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> CustomerHistorySubscriptionGetAllAsyncWithHttpInfo (string customerId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerHistorySubscriptionGetAll");

            var localVarPath = "/s4s-product/customer/{customer-id}/history/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerHistorySubscriptionGetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadResourceStatusList"></param>
        /// <returns></returns>
        public void CustomerHistorySubscriptionValues (string customerId, int? page, int? numberPerPage, bool? loadResourceStatusList)
        {
             CustomerHistorySubscriptionValuesWithHttpInfo(customerId, page, numberPerPage, loadResourceStatusList);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadResourceStatusList"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomerHistorySubscriptionValuesWithHttpInfo (string customerId, int? page, int? numberPerPage, bool? loadResourceStatusList)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerHistorySubscriptionValues");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling SsProductApi->CustomerHistorySubscriptionValues");
            // verify the required parameter 'numberPerPage' is set
            if (numberPerPage == null)
                throw new ApiException(400, "Missing required parameter 'numberPerPage' when calling SsProductApi->CustomerHistorySubscriptionValues");
            // verify the required parameter 'loadResourceStatusList' is set
            if (loadResourceStatusList == null)
                throw new ApiException(400, "Missing required parameter 'loadResourceStatusList' when calling SsProductApi->CustomerHistorySubscriptionValues");

            var localVarPath = "/s4s-product/customer/{customer-id}/history/subscription/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (numberPerPage != null) localVarQueryParams.Add("number-per-page", Configuration.ApiClient.ParameterToString(numberPerPage)); // query parameter
            if (loadResourceStatusList != null) localVarQueryParams.Add("load-resource-status-list", Configuration.ApiClient.ParameterToString(loadResourceStatusList)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerHistorySubscriptionValues", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadResourceStatusList"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomerHistorySubscriptionValuesAsync (string customerId, int? page, int? numberPerPage, bool? loadResourceStatusList)
        {
             await CustomerHistorySubscriptionValuesAsyncWithHttpInfo(customerId, page, numberPerPage, loadResourceStatusList);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadResourceStatusList"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomerHistorySubscriptionValuesAsyncWithHttpInfo (string customerId, int? page, int? numberPerPage, bool? loadResourceStatusList)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerHistorySubscriptionValues");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling SsProductApi->CustomerHistorySubscriptionValues");
            // verify the required parameter 'numberPerPage' is set
            if (numberPerPage == null)
                throw new ApiException(400, "Missing required parameter 'numberPerPage' when calling SsProductApi->CustomerHistorySubscriptionValues");
            // verify the required parameter 'loadResourceStatusList' is set
            if (loadResourceStatusList == null)
                throw new ApiException(400, "Missing required parameter 'loadResourceStatusList' when calling SsProductApi->CustomerHistorySubscriptionValues");

            var localVarPath = "/s4s-product/customer/{customer-id}/history/subscription/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (numberPerPage != null) localVarQueryParams.Add("number-per-page", Configuration.ApiClient.ParameterToString(numberPerPage)); // query parameter
            if (loadResourceStatusList != null) localVarQueryParams.Add("load-resource-status-list", Configuration.ApiClient.ParameterToString(loadResourceStatusList)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerHistorySubscriptionValues", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns></returns>
        public void CustomerResource (string customerId, int? page, int? numberPerPage)
        {
             CustomerResourceWithHttpInfo(customerId, page, numberPerPage);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomerResourceWithHttpInfo (string customerId, int? page, int? numberPerPage)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerResource");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling SsProductApi->CustomerResource");
            // verify the required parameter 'numberPerPage' is set
            if (numberPerPage == null)
                throw new ApiException(400, "Missing required parameter 'numberPerPage' when calling SsProductApi->CustomerResource");

            var localVarPath = "/s4s-product/customer/{customer-id}/resource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (numberPerPage != null) localVarQueryParams.Add("number-per-page", Configuration.ApiClient.ParameterToString(numberPerPage)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerResource", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomerResourceAsync (string customerId, int? page, int? numberPerPage)
        {
             await CustomerResourceAsyncWithHttpInfo(customerId, page, numberPerPage);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomerResourceAsyncWithHttpInfo (string customerId, int? page, int? numberPerPage)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerResource");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling SsProductApi->CustomerResource");
            // verify the required parameter 'numberPerPage' is set
            if (numberPerPage == null)
                throw new ApiException(400, "Missing required parameter 'numberPerPage' when calling SsProductApi->CustomerResource");

            var localVarPath = "/s4s-product/customer/{customer-id}/resource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (numberPerPage != null) localVarQueryParams.Add("number-per-page", Configuration.ApiClient.ParameterToString(numberPerPage)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerResource", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Add a new subscription to customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="overrideSubscriptionId"></param>
        /// <param name="overrideEnjoyId"></param>
        /// <param name="newSubscription"> (optional)</param>
        /// <returns>CustomerPackSubscription</returns>
        public CustomerPackSubscription CustomerSubscriptionAdd (string customerId, string overrideSubscriptionId, string overrideEnjoyId, CustomerPackSubscription newSubscription = null)
        {
             ApiResponse<CustomerPackSubscription> localVarResponse = CustomerSubscriptionAddWithHttpInfo(customerId, overrideSubscriptionId, overrideEnjoyId, newSubscription);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a new subscription to customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="overrideSubscriptionId"></param>
        /// <param name="overrideEnjoyId"></param>
        /// <param name="newSubscription"> (optional)</param>
        /// <returns>ApiResponse of CustomerPackSubscription</returns>
        public ApiResponse< CustomerPackSubscription > CustomerSubscriptionAddWithHttpInfo (string customerId, string overrideSubscriptionId, string overrideEnjoyId, CustomerPackSubscription newSubscription = null)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerSubscriptionAdd");
            // verify the required parameter 'overrideSubscriptionId' is set
            if (overrideSubscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'overrideSubscriptionId' when calling SsProductApi->CustomerSubscriptionAdd");
            // verify the required parameter 'overrideEnjoyId' is set
            if (overrideEnjoyId == null)
                throw new ApiException(400, "Missing required parameter 'overrideEnjoyId' when calling SsProductApi->CustomerSubscriptionAdd");

            var localVarPath = "/s4s-product/customer/{customer-id}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (overrideSubscriptionId != null) localVarQueryParams.Add("override-subscription-id", Configuration.ApiClient.ParameterToString(overrideSubscriptionId)); // query parameter
            if (overrideEnjoyId != null) localVarQueryParams.Add("override-enjoy-id", Configuration.ApiClient.ParameterToString(overrideEnjoyId)); // query parameter
            if (newSubscription != null && newSubscription.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(newSubscription); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newSubscription; // byte array
            }

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerSubscriptionAdd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPackSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPackSubscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPackSubscription)));
            
        }

        /// <summary>
        ///  Add a new subscription to customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="overrideSubscriptionId"></param>
        /// <param name="overrideEnjoyId"></param>
        /// <param name="newSubscription"> (optional)</param>
        /// <returns>Task of CustomerPackSubscription</returns>
        public async System.Threading.Tasks.Task<CustomerPackSubscription> CustomerSubscriptionAddAsync (string customerId, string overrideSubscriptionId, string overrideEnjoyId, CustomerPackSubscription newSubscription = null)
        {
             ApiResponse<CustomerPackSubscription> localVarResponse = await CustomerSubscriptionAddAsyncWithHttpInfo(customerId, overrideSubscriptionId, overrideEnjoyId, newSubscription);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Add a new subscription to customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="overrideSubscriptionId"></param>
        /// <param name="overrideEnjoyId"></param>
        /// <param name="newSubscription"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomerPackSubscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerPackSubscription>> CustomerSubscriptionAddAsyncWithHttpInfo (string customerId, string overrideSubscriptionId, string overrideEnjoyId, CustomerPackSubscription newSubscription = null)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerSubscriptionAdd");
            // verify the required parameter 'overrideSubscriptionId' is set
            if (overrideSubscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'overrideSubscriptionId' when calling SsProductApi->CustomerSubscriptionAdd");
            // verify the required parameter 'overrideEnjoyId' is set
            if (overrideEnjoyId == null)
                throw new ApiException(400, "Missing required parameter 'overrideEnjoyId' when calling SsProductApi->CustomerSubscriptionAdd");

            var localVarPath = "/s4s-product/customer/{customer-id}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (overrideSubscriptionId != null) localVarQueryParams.Add("override-subscription-id", Configuration.ApiClient.ParameterToString(overrideSubscriptionId)); // query parameter
            if (overrideEnjoyId != null) localVarQueryParams.Add("override-enjoy-id", Configuration.ApiClient.ParameterToString(overrideEnjoyId)); // query parameter
            if (newSubscription != null && newSubscription.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(newSubscription); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newSubscription; // byte array
            }

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerSubscriptionAdd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPackSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPackSubscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPackSubscription)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="subscriptionId"></param>
        /// <returns>string</returns>
        public string CustomerSubscriptionClose (string customerId, string subscriptionId)
        {
             ApiResponse<string> localVarResponse = CustomerSubscriptionCloseWithHttpInfo(customerId, subscriptionId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="subscriptionId"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CustomerSubscriptionCloseWithHttpInfo (string customerId, string subscriptionId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerSubscriptionClose");
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SsProductApi->CustomerSubscriptionClose");

            var localVarPath = "/s4s-product/customer/{customer-id}/subscription/{subscription-id}/close";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (subscriptionId != null) localVarPathParams.Add("subscription-id", Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerSubscriptionClose", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="subscriptionId"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CustomerSubscriptionCloseAsync (string customerId, string subscriptionId)
        {
             ApiResponse<string> localVarResponse = await CustomerSubscriptionCloseAsyncWithHttpInfo(customerId, subscriptionId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="subscriptionId"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CustomerSubscriptionCloseAsyncWithHttpInfo (string customerId, string subscriptionId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerSubscriptionClose");
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SsProductApi->CustomerSubscriptionClose");

            var localVarPath = "/s4s-product/customer/{customer-id}/subscription/{subscription-id}/close";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (subscriptionId != null) localVarPathParams.Add("subscription-id", Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerSubscriptionClose", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  Get a subscription by its Ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="subscriptionId"></param>
        /// <returns>CustomerPackSubscription</returns>
        public CustomerPackSubscription CustomerSubscriptionGet (string customerId, string subscriptionId)
        {
             ApiResponse<CustomerPackSubscription> localVarResponse = CustomerSubscriptionGetWithHttpInfo(customerId, subscriptionId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a subscription by its Ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="subscriptionId"></param>
        /// <returns>ApiResponse of CustomerPackSubscription</returns>
        public ApiResponse< CustomerPackSubscription > CustomerSubscriptionGetWithHttpInfo (string customerId, string subscriptionId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerSubscriptionGet");
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SsProductApi->CustomerSubscriptionGet");

            var localVarPath = "/s4s-product/customer/{customer-id}/subscription/{subscription-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (subscriptionId != null) localVarPathParams.Add("subscription-id", Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerSubscriptionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPackSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPackSubscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPackSubscription)));
            
        }

        /// <summary>
        ///  Get a subscription by its Ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="subscriptionId"></param>
        /// <returns>Task of CustomerPackSubscription</returns>
        public async System.Threading.Tasks.Task<CustomerPackSubscription> CustomerSubscriptionGetAsync (string customerId, string subscriptionId)
        {
             ApiResponse<CustomerPackSubscription> localVarResponse = await CustomerSubscriptionGetAsyncWithHttpInfo(customerId, subscriptionId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get a subscription by its Ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="subscriptionId"></param>
        /// <returns>Task of ApiResponse (CustomerPackSubscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerPackSubscription>> CustomerSubscriptionGetAsyncWithHttpInfo (string customerId, string subscriptionId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerSubscriptionGet");
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SsProductApi->CustomerSubscriptionGet");

            var localVarPath = "/s4s-product/customer/{customer-id}/subscription/{subscription-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (subscriptionId != null) localVarPathParams.Add("subscription-id", Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerSubscriptionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPackSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPackSubscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPackSubscription)));
            
        }

        /// <summary>
        ///  Get all the current subscriptions of a customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> CustomerSubscriptionGetAll (string customerId)
        {
             ApiResponse<List<string>> localVarResponse = CustomerSubscriptionGetAllWithHttpInfo(customerId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all the current subscriptions of a customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > CustomerSubscriptionGetAllWithHttpInfo (string customerId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerSubscriptionGetAll");

            var localVarPath = "/s4s-product/customer/{customer-id}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerSubscriptionGetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        ///  Get all the current subscriptions of a customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> CustomerSubscriptionGetAllAsync (string customerId)
        {
             ApiResponse<List<string>> localVarResponse = await CustomerSubscriptionGetAllAsyncWithHttpInfo(customerId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get all the current subscriptions of a customer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> CustomerSubscriptionGetAllAsyncWithHttpInfo (string customerId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerSubscriptionGetAll");

            var localVarPath = "/s4s-product/customer/{customer-id}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerSubscriptionGetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="subscriptionId"></param>
        /// <returns>string</returns>
        public string CustomerSubscriptionRenew (string customerId, string subscriptionId)
        {
             ApiResponse<string> localVarResponse = CustomerSubscriptionRenewWithHttpInfo(customerId, subscriptionId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="subscriptionId"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CustomerSubscriptionRenewWithHttpInfo (string customerId, string subscriptionId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerSubscriptionRenew");
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SsProductApi->CustomerSubscriptionRenew");

            var localVarPath = "/s4s-product/customer/{customer-id}/subscription/{subscription-id}/renew";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (subscriptionId != null) localVarPathParams.Add("subscription-id", Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerSubscriptionRenew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="subscriptionId"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CustomerSubscriptionRenewAsync (string customerId, string subscriptionId)
        {
             ApiResponse<string> localVarResponse = await CustomerSubscriptionRenewAsyncWithHttpInfo(customerId, subscriptionId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="subscriptionId"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CustomerSubscriptionRenewAsyncWithHttpInfo (string customerId, string subscriptionId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerSubscriptionRenew");
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SsProductApi->CustomerSubscriptionRenew");

            var localVarPath = "/s4s-product/customer/{customer-id}/subscription/{subscription-id}/renew";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (subscriptionId != null) localVarPathParams.Add("subscription-id", Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerSubscriptionRenew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="customerSubscriptionId"></param>
        /// <returns>Dictionary&lt;string, long?&gt;</returns>
        public Dictionary<string, long?> CustomerSubscriptionSpend (string customerId, string customerSubscriptionId)
        {
             ApiResponse<Dictionary<string, long?>> localVarResponse = CustomerSubscriptionSpendWithHttpInfo(customerId, customerSubscriptionId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="customerSubscriptionId"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, long?&gt;</returns>
        public ApiResponse< Dictionary<string, long?> > CustomerSubscriptionSpendWithHttpInfo (string customerId, string customerSubscriptionId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerSubscriptionSpend");
            // verify the required parameter 'customerSubscriptionId' is set
            if (customerSubscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'customerSubscriptionId' when calling SsProductApi->CustomerSubscriptionSpend");

            var localVarPath = "/s4s-product/customer/{customer-id}/subscription/{customer-subscription-id}/spend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (customerSubscriptionId != null) localVarPathParams.Add("customer-subscription-id", Configuration.ApiClient.ParameterToString(customerSubscriptionId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerSubscriptionSpend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, long?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, long?>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, long?>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="customerSubscriptionId"></param>
        /// <returns>Task of Dictionary&lt;string, long?&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, long?>> CustomerSubscriptionSpendAsync (string customerId, string customerSubscriptionId)
        {
             ApiResponse<Dictionary<string, long?>> localVarResponse = await CustomerSubscriptionSpendAsyncWithHttpInfo(customerId, customerSubscriptionId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="customerSubscriptionId"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, long?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, long?>>> CustomerSubscriptionSpendAsyncWithHttpInfo (string customerId, string customerSubscriptionId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerSubscriptionSpend");
            // verify the required parameter 'customerSubscriptionId' is set
            if (customerSubscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'customerSubscriptionId' when calling SsProductApi->CustomerSubscriptionSpend");

            var localVarPath = "/s4s-product/customer/{customer-id}/subscription/{customer-subscription-id}/spend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (customerSubscriptionId != null) localVarPathParams.Add("customer-subscription-id", Configuration.ApiClient.ParameterToString(customerSubscriptionId)); // path parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerSubscriptionSpend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, long?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, long?>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, long?>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadDefaultUser"></param>
        /// <returns></returns>
        public void CustomerSubscriptionValues (string customerId, int? page, int? numberPerPage, bool? loadDefaultUser)
        {
             CustomerSubscriptionValuesWithHttpInfo(customerId, page, numberPerPage, loadDefaultUser);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadDefaultUser"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomerSubscriptionValuesWithHttpInfo (string customerId, int? page, int? numberPerPage, bool? loadDefaultUser)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerSubscriptionValues");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling SsProductApi->CustomerSubscriptionValues");
            // verify the required parameter 'numberPerPage' is set
            if (numberPerPage == null)
                throw new ApiException(400, "Missing required parameter 'numberPerPage' when calling SsProductApi->CustomerSubscriptionValues");
            // verify the required parameter 'loadDefaultUser' is set
            if (loadDefaultUser == null)
                throw new ApiException(400, "Missing required parameter 'loadDefaultUser' when calling SsProductApi->CustomerSubscriptionValues");

            var localVarPath = "/s4s-product/customer/{customer-id}/subscription/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (numberPerPage != null) localVarQueryParams.Add("number-per-page", Configuration.ApiClient.ParameterToString(numberPerPage)); // query parameter
            if (loadDefaultUser != null) localVarQueryParams.Add("load-default-user", Configuration.ApiClient.ParameterToString(loadDefaultUser)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerSubscriptionValues", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadDefaultUser"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomerSubscriptionValuesAsync (string customerId, int? page, int? numberPerPage, bool? loadDefaultUser)
        {
             await CustomerSubscriptionValuesAsyncWithHttpInfo(customerId, page, numberPerPage, loadDefaultUser);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The given id from the user service</param>
        /// <param name="page"></param>
        /// <param name="numberPerPage"></param>
        /// <param name="loadDefaultUser"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomerSubscriptionValuesAsyncWithHttpInfo (string customerId, int? page, int? numberPerPage, bool? loadDefaultUser)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling SsProductApi->CustomerSubscriptionValues");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling SsProductApi->CustomerSubscriptionValues");
            // verify the required parameter 'numberPerPage' is set
            if (numberPerPage == null)
                throw new ApiException(400, "Missing required parameter 'numberPerPage' when calling SsProductApi->CustomerSubscriptionValues");
            // verify the required parameter 'loadDefaultUser' is set
            if (loadDefaultUser == null)
                throw new ApiException(400, "Missing required parameter 'loadDefaultUser' when calling SsProductApi->CustomerSubscriptionValues");

            var localVarPath = "/s4s-product/customer/{customer-id}/subscription/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerId != null) localVarPathParams.Add("customer-id", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (numberPerPage != null) localVarQueryParams.Add("number-per-page", Configuration.ApiClient.ParameterToString(numberPerPage)); // query parameter
            if (loadDefaultUser != null) localVarQueryParams.Add("load-default-user", Configuration.ApiClient.ParameterToString(loadDefaultUser)); // query parameter

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerSubscriptionValues", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ProductConf</returns>
        public ProductConf ProductConfigGet ()
        {
             ApiResponse<ProductConf> localVarResponse = ProductConfigGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ProductConf</returns>
        public ApiResponse< ProductConf > ProductConfigGetWithHttpInfo ()
        {

            var localVarPath = "/s4s-product/productConfig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductConfigGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductConf>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductConf) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductConf)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ProductConf</returns>
        public async System.Threading.Tasks.Task<ProductConf> ProductConfigGetAsync ()
        {
             ApiResponse<ProductConf> localVarResponse = await ProductConfigGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ProductConf)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductConf>> ProductConfigGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/s4s-product/productConfig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductConfigGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductConf>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductConf) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductConf)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>string</returns>
        public string ProductConfigPut (ProductConf a = null)
        {
             ApiResponse<string> localVarResponse = ProductConfigPutWithHttpInfo(a);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ProductConfigPutWithHttpInfo (ProductConf a = null)
        {

            var localVarPath = "/s4s-product/productConfig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (a != null && a.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(a); // http body (model) parameter
            }
            else
            {
                localVarPostBody = a; // byte array
            }

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductConfigPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ProductConfigPutAsync (ProductConf a = null)
        {
             ApiResponse<string> localVarResponse = await ProductConfigPutAsyncWithHttpInfo(a);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="a"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ProductConfigPutAsyncWithHttpInfo (ProductConf a = null)
        {

            var localVarPath = "/s4s-product/productConfig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (a != null && a.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(a); // http body (model) parameter
            }
            else
            {
                localVarPostBody = a; // byte array
            }

            // authentication (tenantid) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("tenantid")))
            {
                localVarQueryParams["tenantid"] = Configuration.GetApiKeyWithPrefix("tenantid");
            }
            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductConfigPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

    }
}
